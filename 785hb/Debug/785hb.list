
785hb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002714  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080028a0  080028a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e0  080028e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080028e0  080028e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e0  080028e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080028e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  080028f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080028f8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a244  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001515  00000000  00000000  0002a284  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad8  00000000  00000000  0002b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a20  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021449  00000000  00000000  0002cc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008650  00000000  00000000  0004e0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce82d  00000000  00000000  00056731  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf8  00000000  00000000  00124fdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002888 	.word	0x08002888

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08002888 	.word	0x08002888

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa29 	bl	8000626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f816 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8fc 	bl	80003d4 <MX_GPIO_Init>
  MX_TIM15_Init();
 80001dc:	f000 f858 	bl	8000290 <MX_TIM15_Init>
  HAL_TIM_PWM_Init(&htim15);
 80001e0:	4806      	ldr	r0, [pc, #24]	; (80001fc <main+0x30>)
 80001e2:	f001 fb9c 	bl	800191e <HAL_TIM_PWM_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80001e6:	2104      	movs	r1, #4
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <main+0x30>)
 80001ea:	f001 fbf9 	bl	80019e0 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_ConfigChannel(&htim15, TIM_CHANNEL_2);
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, val);
 80001ee:	4b04      	ldr	r3, [pc, #16]	; (8000200 <main+0x34>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b02      	ldr	r3, [pc, #8]	; (80001fc <main+0x30>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x2c>
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	20000000 	.word	0x20000000

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b096      	sub	sp, #88	; 0x58
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0314 	add.w	r3, r7, #20
 800020e:	2244      	movs	r2, #68	; 0x44
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fb30 	bl	8002878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000226:	2310      	movs	r3, #16
 8000228:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000232:	2360      	movs	r3, #96	; 0x60
 8000234:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000236:	2300      	movs	r3, #0
 8000238:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023a:	f107 0314 	add.w	r3, r7, #20
 800023e:	4618      	mov	r0, r3
 8000240:	f000 fd2a 	bl	8000c98 <HAL_RCC_OscConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800024a:	f000 f8db 	bl	8000404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800024e:	230f      	movs	r3, #15
 8000250:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000262:	463b      	mov	r3, r7
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f001 f936 	bl	80014d8 <HAL_RCC_ClockConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000272:	f000 f8c7 	bl	8000404 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000276:	f44f 7000 	mov.w	r0, #512	; 0x200
 800027a:	f000 fcb7 	bl	8000bec <HAL_PWREx_ControlVoltageScaling>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000284:	f000 f8be 	bl	8000404 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3758      	adds	r7, #88	; 0x58
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b09a      	sub	sp, #104	; 0x68
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000296:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	222c      	movs	r2, #44	; 0x2c
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fad4 	bl	8002878 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80002d0:	4b3e      	ldr	r3, [pc, #248]	; (80003cc <MX_TIM15_Init+0x13c>)
 80002d2:	4a3f      	ldr	r2, [pc, #252]	; (80003d0 <MX_TIM15_Init+0x140>)
 80002d4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 80002d6:	4b3d      	ldr	r3, [pc, #244]	; (80003cc <MX_TIM15_Init+0x13c>)
 80002d8:	2201      	movs	r2, #1
 80002da:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002dc:	4b3b      	ldr	r3, [pc, #236]	; (80003cc <MX_TIM15_Init+0x13c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80002e2:	4b3a      	ldr	r3, [pc, #232]	; (80003cc <MX_TIM15_Init+0x13c>)
 80002e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ea:	4b38      	ldr	r3, [pc, #224]	; (80003cc <MX_TIM15_Init+0x13c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80002f0:	4b36      	ldr	r3, [pc, #216]	; (80003cc <MX_TIM15_Init+0x13c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f6:	4b35      	ldr	r3, [pc, #212]	; (80003cc <MX_TIM15_Init+0x13c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80002fc:	4833      	ldr	r0, [pc, #204]	; (80003cc <MX_TIM15_Init+0x13c>)
 80002fe:	f001 fab7 	bl	8001870 <HAL_TIM_Base_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000308:	f000 f87c 	bl	8000404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000310:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000312:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000316:	4619      	mov	r1, r3
 8000318:	482c      	ldr	r0, [pc, #176]	; (80003cc <MX_TIM15_Init+0x13c>)
 800031a:	f001 fd4f 	bl	8001dbc <HAL_TIM_ConfigClockSource>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000324:	f000 f86e 	bl	8000404 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000328:	4828      	ldr	r0, [pc, #160]	; (80003cc <MX_TIM15_Init+0x13c>)
 800032a:	f001 faf8 	bl	800191e <HAL_TIM_PWM_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000334:	f000 f866 	bl	8000404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000340:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000344:	4619      	mov	r1, r3
 8000346:	4821      	ldr	r0, [pc, #132]	; (80003cc <MX_TIM15_Init+0x13c>)
 8000348:	f002 f994 	bl	8002674 <HAL_TIMEx_MasterConfigSynchronization>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000352:	f000 f857 	bl	8000404 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000356:	2360      	movs	r3, #96	; 0x60
 8000358:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3125;
 800035a:	f640 4335 	movw	r3, #3125	; 0xc35
 800035e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000360:	2300      	movs	r3, #0
 8000362:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000364:	2300      	movs	r3, #0
 8000366:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000368:	2300      	movs	r3, #0
 800036a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800036c:	2300      	movs	r3, #0
 800036e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000378:	2204      	movs	r2, #4
 800037a:	4619      	mov	r1, r3
 800037c:	4813      	ldr	r0, [pc, #76]	; (80003cc <MX_TIM15_Init+0x13c>)
 800037e:	f001 fc0d 	bl	8001b9c <HAL_TIM_PWM_ConfigChannel>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000388:	f000 f83c 	bl	8000404 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800038c:	2300      	movs	r3, #0
 800038e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	4807      	ldr	r0, [pc, #28]	; (80003cc <MX_TIM15_Init+0x13c>)
 80003b0:	f002 f9c6 	bl	8002740 <HAL_TIMEx_ConfigBreakDeadTime>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_TIM15_Init+0x12e>
  {
    Error_Handler();
 80003ba:	f000 f823 	bl	8000404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80003be:	4803      	ldr	r0, [pc, #12]	; (80003cc <MX_TIM15_Init+0x13c>)
 80003c0:	f000 f86c 	bl	800049c <HAL_TIM_MspPostInit>

}
 80003c4:	bf00      	nop
 80003c6:	3768      	adds	r7, #104	; 0x68
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	40014000 	.word	0x40014000

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_GPIO_Init+0x2c>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	4a08      	ldr	r2, [pc, #32]	; (8000400 <MX_GPIO_Init+0x2c>)
 80003e0:	f043 0302 	orr.w	r3, r3, #2
 80003e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_GPIO_Init+0x2c>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	f003 0302 	and.w	r3, r3, #2
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]

}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
	...

08000414 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x44>)
 800041c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x44>)
 8000420:	f043 0301 	orr.w	r3, r3, #1
 8000424:	6613      	str	r3, [r2, #96]	; 0x60
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x44>)
 8000428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_MspInit+0x44>)
 8000434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <HAL_MspInit+0x44>)
 8000438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800043c:	6593      	str	r3, [r2, #88]	; 0x58
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_MspInit+0x44>)
 8000440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <HAL_TIM_Base_MspInit+0x38>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d10b      	bne.n	8000486 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_TIM_Base_MspInit+0x3c>)
 8000470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000472:	4a09      	ldr	r2, [pc, #36]	; (8000498 <HAL_TIM_Base_MspInit+0x3c>)
 8000474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000478:	6613      	str	r3, [r2, #96]	; 0x60
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <HAL_TIM_Base_MspInit+0x3c>)
 800047c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800047e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40014000 	.word	0x40014000
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a11      	ldr	r2, [pc, #68]	; (8000500 <HAL_TIM_MspPostInit+0x64>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d11c      	bne.n	80004f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <HAL_TIM_MspPostInit+0x68>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a10      	ldr	r2, [pc, #64]	; (8000504 <HAL_TIM_MspPostInit+0x68>)
 80004c4:	f043 0302 	orr.w	r3, r3, #2
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <HAL_TIM_MspPostInit+0x68>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f003 0302 	and.w	r3, r3, #2
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80004d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	2302      	movs	r3, #2
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80004e8:	230e      	movs	r3, #14
 80004ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4619      	mov	r1, r3
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <HAL_TIM_MspPostInit+0x6c>)
 80004f4:	f000 f9f2 	bl	80008dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40014000 	.word	0x40014000
 8000504:	40021000 	.word	0x40021000
 8000508:	48000400 	.word	0x48000400

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051e:	e7fe      	b.n	800051e <HardFault_Handler+0x4>

08000520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <MemManage_Handler+0x4>

08000526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <BusFault_Handler+0x4>

0800052c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <UsageFault_Handler+0x4>

08000532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f8b6 	bl	80006d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <SystemInit+0x64>)
 800056e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000572:	4a16      	ldr	r2, [pc, #88]	; (80005cc <SystemInit+0x64>)
 8000574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <SystemInit+0x68>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <SystemInit+0x68>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <SystemInit+0x68>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <SystemInit+0x68>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <SystemInit+0x68>)
 8000594:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000598:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800059c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <SystemInit+0x68>)
 80005a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <SystemInit+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <SystemInit+0x68>)
 80005ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80005b2:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <SystemInit+0x68>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <SystemInit+0x64>)
 80005ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005be:	609a      	str	r2, [r3, #8]
#endif
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	40021000 	.word	0x40021000

080005d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800060c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d8:	f7ff ffc6 	bl	8000568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005de:	e003      	b.n	80005e8 <LoopCopyDataInit>

080005e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80005e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005e6:	3104      	adds	r1, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <LoopForever+0xa>)
	ldr	r3, =_edata
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <LoopForever+0xe>)
	adds	r2, r0, r1
 80005ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005f0:	d3f6      	bcc.n	80005e0 <CopyDataInit>
	ldr	r2, =_sbss
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <LoopForever+0x12>)
	b	LoopFillZerobss
 80005f4:	e002      	b.n	80005fc <LoopFillZerobss>

080005f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005f8:	f842 3b04 	str.w	r3, [r2], #4

080005fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <LoopForever+0x16>)
	cmp	r2, r3
 80005fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000600:	d3f9      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000602:	f002 f915 	bl	8002830 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000606:	f7ff fde1 	bl	80001cc <main>

0800060a <LoopForever>:

LoopForever:
    b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800060c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000610:	080028e8 	.word	0x080028e8
	ldr	r0, =_sdata
 8000614:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000618:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800061c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000620:	2000007c 	.word	0x2000007c

08000624 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_IRQHandler>

08000626 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800062c:	2300      	movs	r3, #0
 800062e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000630:	2003      	movs	r0, #3
 8000632:	f000 f91f 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f80e 	bl	8000658 <HAL_InitTick>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	e001      	b.n	800064c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000648:	f7ff fee4 	bl	8000414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800064c:	79fb      	ldrb	r3, [r7, #7]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_InitTick+0x6c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d023      	beq.n	80006b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <HAL_InitTick+0x70>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <HAL_InitTick+0x6c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	fbb3 f3f1 	udiv	r3, r3, r1
 800067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f91d 	bl	80008c2 <HAL_SYSTICK_Config>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d10f      	bne.n	80006ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d809      	bhi.n	80006a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 f8f5 	bl	800088a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006a0:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <HAL_InitTick+0x74>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	e007      	b.n	80006b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006a8:	2301      	movs	r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
 80006ac:	e004      	b.n	80006b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	e001      	b.n	80006b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006b4:	2301      	movs	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000000c 	.word	0x2000000c
 80006c8:	20000004 	.word	0x20000004
 80006cc:	20000008 	.word	0x20000008

080006d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_IncTick+0x20>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_IncTick+0x24>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	4a04      	ldr	r2, [pc, #16]	; (80006f4 <HAL_IncTick+0x24>)
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2000000c 	.word	0x2000000c
 80006f4:	20000078 	.word	0x20000078

080006f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTick;
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <HAL_GetTick+0x14>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000078 	.word	0x20000078

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__NVIC_GetPriorityGrouping+0x18>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	f003 0307 	and.w	r3, r3, #7
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ff8e 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff47 	bl	8000710 <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff5c 	bl	8000758 <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff8e 	bl	80007c8 <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5d 	bl	8000774 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffb0 	bl	8000830 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b087      	sub	sp, #28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ea:	e154      	b.n	8000b96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	2101      	movs	r1, #1
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f000 8146 	beq.w	8000b90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d00b      	beq.n	8000924 <HAL_GPIO_Init+0x48>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d007      	beq.n	8000924 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000918:	2b11      	cmp	r3, #17
 800091a:	d003      	beq.n	8000924 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b12      	cmp	r3, #18
 8000922:	d130      	bne.n	8000986 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800095a:	2201      	movs	r2, #1
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43db      	mvns	r3, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4013      	ands	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	091b      	lsrs	r3, r3, #4
 8000970:	f003 0201 	and.w	r2, r3, #1
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	68db      	ldr	r3, [r3, #12]
 800098a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	2203      	movs	r2, #3
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d003      	beq.n	80009c6 <HAL_GPIO_Init+0xea>
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b12      	cmp	r3, #18
 80009c4:	d123      	bne.n	8000a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	08da      	lsrs	r2, r3, #3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3208      	adds	r2, #8
 80009ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	691a      	ldr	r2, [r3, #16]
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	08da      	lsrs	r2, r3, #3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3208      	adds	r2, #8
 8000a08:	6939      	ldr	r1, [r7, #16]
 8000a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	2203      	movs	r2, #3
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4013      	ands	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0203 	and.w	r2, r3, #3
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f000 80a0 	beq.w	8000b90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a50:	4b58      	ldr	r3, [pc, #352]	; (8000bb4 <HAL_GPIO_Init+0x2d8>)
 8000a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a54:	4a57      	ldr	r2, [pc, #348]	; (8000bb4 <HAL_GPIO_Init+0x2d8>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5c:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <HAL_GPIO_Init+0x2d8>)
 8000a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a68:	4a53      	ldr	r2, [pc, #332]	; (8000bb8 <HAL_GPIO_Init+0x2dc>)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f003 0303 	and.w	r3, r3, #3
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a92:	d019      	beq.n	8000ac8 <HAL_GPIO_Init+0x1ec>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a49      	ldr	r2, [pc, #292]	; (8000bbc <HAL_GPIO_Init+0x2e0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d013      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e8>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a48      	ldr	r2, [pc, #288]	; (8000bc0 <HAL_GPIO_Init+0x2e4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d00d      	beq.n	8000ac0 <HAL_GPIO_Init+0x1e4>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a47      	ldr	r2, [pc, #284]	; (8000bc4 <HAL_GPIO_Init+0x2e8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d007      	beq.n	8000abc <HAL_GPIO_Init+0x1e0>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a46      	ldr	r2, [pc, #280]	; (8000bc8 <HAL_GPIO_Init+0x2ec>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d101      	bne.n	8000ab8 <HAL_GPIO_Init+0x1dc>
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	e008      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ab8:	2307      	movs	r3, #7
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000abc:	2303      	movs	r3, #3
 8000abe:	e004      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <HAL_GPIO_Init+0x1ee>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	f002 0203 	and.w	r2, r2, #3
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ada:	4937      	ldr	r1, [pc, #220]	; (8000bb8 <HAL_GPIO_Init+0x2dc>)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	089b      	lsrs	r3, r3, #2
 8000ae0:	3302      	adds	r3, #2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <HAL_GPIO_Init+0x2f0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	43db      	mvns	r3, r3
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4013      	ands	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b0c:	4a2f      	ldr	r2, [pc, #188]	; (8000bcc <HAL_GPIO_Init+0x2f0>)
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <HAL_GPIO_Init+0x2f0>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b36:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <HAL_GPIO_Init+0x2f0>)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_GPIO_Init+0x2f0>)
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d003      	beq.n	8000b60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b60:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <HAL_GPIO_Init+0x2f0>)
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_GPIO_Init+0x2f0>)
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	43db      	mvns	r3, r3
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	4013      	ands	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_GPIO_Init+0x2f0>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f47f aea3 	bne.w	80008ec <HAL_GPIO_Init+0x10>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	371c      	adds	r7, #28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000800 	.word	0x48000800
 8000bc4:	48000c00 	.word	0x48000c00
 8000bc8:	48001000 	.word	0x48001000
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40007000 	.word	0x40007000

08000bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bfa:	d130      	bne.n	8000c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c08:	d038      	beq.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c12:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2232      	movs	r2, #50	; 0x32
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000c26:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2a:	0c9b      	lsrs	r3, r3, #18
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c30:	e002      	b.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c44:	d102      	bne.n	8000c4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1f2      	bne.n	8000c32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c58:	d110      	bne.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e00f      	b.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6a:	d007      	beq.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	20000004 	.word	0x20000004
 8000c94:	431bde83 	.word	0x431bde83

08000c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f000 bc11 	b.w	80014ce <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cac:	4ba0      	ldr	r3, [pc, #640]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f003 030c 	and.w	r3, r3, #12
 8000cb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cb6:	4b9e      	ldr	r3, [pc, #632]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 80e4 	beq.w	8000e96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d007      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x4c>
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2b0c      	cmp	r3, #12
 8000cd8:	f040 808b 	bne.w	8000df2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	f040 8087 	bne.w	8000df2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ce4:	4b92      	ldr	r3, [pc, #584]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <HAL_RCC_OscConfig+0x64>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d101      	bne.n	8000cfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e3e8      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6a1a      	ldr	r2, [r3, #32]
 8000d00:	4b8b      	ldr	r3, [pc, #556]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d004      	beq.n	8000d16 <HAL_RCC_OscConfig+0x7e>
 8000d0c:	4b88      	ldr	r3, [pc, #544]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d14:	e005      	b.n	8000d22 <HAL_RCC_OscConfig+0x8a>
 8000d16:	4b86      	ldr	r3, [pc, #536]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d223      	bcs.n	8000d6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fd40 	bl	80017b0 <RCC_SetFlashLatencyFromMSIRange>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e3c9      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d3a:	4b7d      	ldr	r3, [pc, #500]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a7c      	ldr	r2, [pc, #496]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b7a      	ldr	r3, [pc, #488]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a1b      	ldr	r3, [r3, #32]
 8000d52:	4977      	ldr	r1, [pc, #476]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d58:	4b75      	ldr	r3, [pc, #468]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	4972      	ldr	r1, [pc, #456]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
 8000d6c:	e025      	b.n	8000dba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d6e:	4b70      	ldr	r3, [pc, #448]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a6f      	ldr	r2, [pc, #444]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b6d      	ldr	r3, [pc, #436]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a1b      	ldr	r3, [r3, #32]
 8000d86:	496a      	ldr	r1, [pc, #424]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d8c:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	4965      	ldr	r1, [pc, #404]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d109      	bne.n	8000dba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fd00 	bl	80017b0 <RCC_SetFlashLatencyFromMSIRange>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e389      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000dba:	f000 fc6f 	bl	800169c <HAL_RCC_GetSysClockFreq>
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	4a5a      	ldr	r2, [pc, #360]	; (8000f34 <HAL_RCC_OscConfig+0x29c>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd6:	4a58      	ldr	r2, [pc, #352]	; (8000f38 <HAL_RCC_OscConfig+0x2a0>)
 8000dd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dda:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_RCC_OscConfig+0x2a4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fc3a 	bl	8000658 <HAL_InitTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d052      	beq.n	8000e94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	e36d      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d032      	beq.n	8000e60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dfa:	4b4d      	ldr	r3, [pc, #308]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a4c      	ldr	r2, [pc, #304]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e06:	f7ff fc77 	bl	80006f8 <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e0e:	f7ff fc73 	bl	80006f8 <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e356      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e20:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e2c:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a3f      	ldr	r2, [pc, #252]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e32:	f043 0308 	orr.w	r3, r3, #8
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	493a      	ldr	r1, [pc, #232]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e4a:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	4935      	ldr	r1, [pc, #212]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	604b      	str	r3, [r1, #4]
 8000e5e:	e01a      	b.n	8000e96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e60:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a32      	ldr	r2, [pc, #200]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e66:	f023 0301 	bic.w	r3, r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fc44 	bl	80006f8 <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e74:	f7ff fc40 	bl	80006f8 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e323      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f0      	bne.n	8000e74 <HAL_RCC_OscConfig+0x1dc>
 8000e92:	e000      	b.n	8000e96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d073      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d005      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x21c>
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	2b0c      	cmp	r3, #12
 8000eac:	d10e      	bne.n	8000ecc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d10b      	bne.n	8000ecc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d063      	beq.n	8000f88 <HAL_RCC_OscConfig+0x2f0>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d15f      	bne.n	8000f88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e300      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed4:	d106      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x24c>
 8000ed6:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e01d      	b.n	8000f20 <HAL_RCC_OscConfig+0x288>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x270>
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a0c      	ldr	r2, [pc, #48]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e00b      	b.n	8000f20 <HAL_RCC_OscConfig+0x288>
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <HAL_RCC_OscConfig+0x298>)
 8000f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d01b      	beq.n	8000f60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f28:	f7ff fbe6 	bl	80006f8 <HAL_GetTick>
 8000f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f2e:	e010      	b.n	8000f52 <HAL_RCC_OscConfig+0x2ba>
 8000f30:	40021000 	.word	0x40021000
 8000f34:	080028a0 	.word	0x080028a0
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fbda 	bl	80006f8 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e2bd      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f52:	4baf      	ldr	r3, [pc, #700]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2a8>
 8000f5e:	e014      	b.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f60:	f7ff fbca 	bl	80006f8 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f68:	f7ff fbc6 	bl	80006f8 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e2a9      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f7a:	4ba5      	ldr	r3, [pc, #660]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d1f0      	bne.n	8000f68 <HAL_RCC_OscConfig+0x2d0>
 8000f86:	e000      	b.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d060      	beq.n	8001058 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x310>
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2b0c      	cmp	r3, #12
 8000fa0:	d119      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d116      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa8:	4b99      	ldr	r3, [pc, #612]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x328>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e286      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc0:	4b93      	ldr	r3, [pc, #588]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	061b      	lsls	r3, r3, #24
 8000fce:	4990      	ldr	r1, [pc, #576]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd4:	e040      	b.n	8001058 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d023      	beq.n	8001026 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fde:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a8b      	ldr	r2, [pc, #556]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fb85 	bl	80006f8 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fb81 	bl	80006f8 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e264      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001004:	4b82      	ldr	r3, [pc, #520]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	4b7f      	ldr	r3, [pc, #508]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	061b      	lsls	r3, r3, #24
 800101e:	497c      	ldr	r1, [pc, #496]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001020:	4313      	orrs	r3, r2
 8001022:	604b      	str	r3, [r1, #4]
 8001024:	e018      	b.n	8001058 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001026:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a79      	ldr	r2, [pc, #484]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 800102c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fb61 	bl	80006f8 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fb5d 	bl	80006f8 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e240      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800104c:	4b70      	ldr	r3, [pc, #448]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0308 	and.w	r3, r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	d03c      	beq.n	80010de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d01c      	beq.n	80010a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 800106e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001072:	4a67      	ldr	r2, [pc, #412]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800107c:	f7ff fb3c 	bl	80006f8 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fb38 	bl	80006f8 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e21b      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001096:	4b5e      	ldr	r3, [pc, #376]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0ef      	beq.n	8001084 <HAL_RCC_OscConfig+0x3ec>
 80010a4:	e01b      	b.n	80010de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80010a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ac:	4a58      	ldr	r2, [pc, #352]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb1f 	bl	80006f8 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010be:	f7ff fb1b 	bl	80006f8 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e1fe      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010d0:	4b4f      	ldr	r3, [pc, #316]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80010d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1ef      	bne.n	80010be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80a6 	beq.w	8001238 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80010f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d10d      	bne.n	8001118 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	4a43      	ldr	r2, [pc, #268]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001106:	6593      	str	r3, [r2, #88]	; 0x58
 8001108:	4b41      	ldr	r3, [pc, #260]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001114:	2301      	movs	r3, #1
 8001116:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001118:	4b3e      	ldr	r3, [pc, #248]	; (8001214 <HAL_RCC_OscConfig+0x57c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d118      	bne.n	8001156 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001124:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_RCC_OscConfig+0x57c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a3a      	ldr	r2, [pc, #232]	; (8001214 <HAL_RCC_OscConfig+0x57c>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001130:	f7ff fae2 	bl	80006f8 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001138:	f7ff fade 	bl	80006f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e1c1      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <HAL_RCC_OscConfig+0x57c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f0      	beq.n	8001138 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_RCC_OscConfig+0x4d8>
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001164:	4a2a      	ldr	r2, [pc, #168]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800116e:	e024      	b.n	80011ba <HAL_RCC_OscConfig+0x522>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d110      	bne.n	800119a <HAL_RCC_OscConfig+0x502>
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 800117a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117e:	4a24      	ldr	r2, [pc, #144]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 800118a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118e:	4a20      	ldr	r2, [pc, #128]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001198:	e00f      	b.n	80011ba <HAL_RCC_OscConfig+0x522>
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 800119c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a0:	4a1b      	ldr	r2, [pc, #108]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80011ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011b0:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80011b2:	f023 0304 	bic.w	r3, r3, #4
 80011b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d016      	beq.n	80011f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011c2:	f7ff fa99 	bl	80006f8 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011c8:	e00a      	b.n	80011e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ca:	f7ff fa95 	bl	80006f8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011d8:	4293      	cmp	r3, r2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e176      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x578>)
 80011e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0ed      	beq.n	80011ca <HAL_RCC_OscConfig+0x532>
 80011ee:	e01a      	b.n	8001226 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fa82 	bl	80006f8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011f6:	e00f      	b.n	8001218 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f8:	f7ff fa7e 	bl	80006f8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f241 3288 	movw	r2, #5000	; 0x1388
 8001206:	4293      	cmp	r3, r2
 8001208:	d906      	bls.n	8001218 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e15f      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001218:	4baa      	ldr	r3, [pc, #680]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1e8      	bne.n	80011f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d105      	bne.n	8001238 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800122c:	4ba5      	ldr	r3, [pc, #660]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	4aa4      	ldr	r2, [pc, #656]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001236:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	2b00      	cmp	r3, #0
 8001242:	d03c      	beq.n	80012be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	2b00      	cmp	r3, #0
 800124a:	d01c      	beq.n	8001286 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800124c:	4b9d      	ldr	r3, [pc, #628]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800124e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001252:	4a9c      	ldr	r2, [pc, #624]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff fa4c 	bl	80006f8 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001264:	f7ff fa48 	bl	80006f8 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e12b      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001276:	4b93      	ldr	r3, [pc, #588]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0ef      	beq.n	8001264 <HAL_RCC_OscConfig+0x5cc>
 8001284:	e01b      	b.n	80012be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001286:	4b8f      	ldr	r3, [pc, #572]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800128c:	4a8d      	ldr	r2, [pc, #564]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001296:	f7ff fa2f 	bl	80006f8 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800129e:	f7ff fa2b 	bl	80006f8 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e10e      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012b0:	4b84      	ldr	r3, [pc, #528]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 80012b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1ef      	bne.n	800129e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8102 	beq.w	80014cc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	f040 80c5 	bne.w	800145c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012d2:	4b7c      	ldr	r3, [pc, #496]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0203 	and.w	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d12c      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	3b01      	subs	r3, #1
 80012f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d123      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001304:	429a      	cmp	r2, r3
 8001306:	d11b      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001314:	429a      	cmp	r2, r3
 8001316:	d113      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001322:	085b      	lsrs	r3, r3, #1
 8001324:	3b01      	subs	r3, #1
 8001326:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001328:	429a      	cmp	r2, r3
 800132a:	d109      	bne.n	8001340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	3b01      	subs	r3, #1
 800133a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800133c:	429a      	cmp	r2, r3
 800133e:	d067      	beq.n	8001410 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	2b0c      	cmp	r3, #12
 8001344:	d062      	beq.n	800140c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0bb      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5a      	ldr	r2, [pc, #360]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800135c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001360:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001362:	f7ff f9c9 	bl	80006f8 <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136a:	f7ff f9c5 	bl	80006f8 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e0a8      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137c:	4b51      	ldr	r3, [pc, #324]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f0      	bne.n	800136a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001388:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	4b4e      	ldr	r3, [pc, #312]	; (80014c8 <HAL_RCC_OscConfig+0x830>)
 800138e:	4013      	ands	r3, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001398:	3a01      	subs	r2, #1
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	4311      	orrs	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013a2:	0212      	lsls	r2, r2, #8
 80013a4:	4311      	orrs	r1, r2
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013aa:	0852      	lsrs	r2, r2, #1
 80013ac:	3a01      	subs	r2, #1
 80013ae:	0552      	lsls	r2, r2, #21
 80013b0:	4311      	orrs	r1, r2
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013b6:	0852      	lsrs	r2, r2, #1
 80013b8:	3a01      	subs	r2, #1
 80013ba:	0652      	lsls	r2, r2, #25
 80013bc:	4311      	orrs	r1, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013c2:	06d2      	lsls	r2, r2, #27
 80013c4:	430a      	orrs	r2, r1
 80013c6:	493f      	ldr	r1, [pc, #252]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013cc:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a3c      	ldr	r2, [pc, #240]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 80013d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013d8:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a39      	ldr	r2, [pc, #228]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 80013de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013e4:	f7ff f988 	bl	80006f8 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff f984 	bl	80006f8 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e067      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013fe:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800140a:	e05f      	b.n	80014cc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e05e      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d157      	bne.n	80014cc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a28      	ldr	r2, [pc, #160]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001426:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800142e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001432:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001434:	f7ff f960 	bl	80006f8 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f95c 	bl	80006f8 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e03f      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x7a4>
 800145a:	e037      	b.n	80014cc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d02d      	beq.n	80014be <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800146c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001480:	f023 0303 	bic.w	r3, r3, #3
 8001484:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001486:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 800148c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001494:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001496:	f7ff f92f 	bl	80006f8 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149e:	f7ff f92b 	bl	80006f8 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e00e      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <HAL_RCC_OscConfig+0x82c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f0      	bne.n	800149e <HAL_RCC_OscConfig+0x806>
 80014bc:	e006      	b.n	80014cc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e005      	b.n	80014ce <HAL_RCC_OscConfig+0x836>
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000
 80014c8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop

080014d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0c8      	b.n	800167e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ec:	4b66      	ldr	r3, [pc, #408]	; (8001688 <HAL_RCC_ClockConfig+0x1b0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d910      	bls.n	800151c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_ClockConfig+0x1b0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 0207 	bic.w	r2, r3, #7
 8001502:	4961      	ldr	r1, [pc, #388]	; (8001688 <HAL_RCC_ClockConfig+0x1b0>)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <HAL_RCC_ClockConfig+0x1b0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0b0      	b.n	800167e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d04c      	beq.n	80015c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d107      	bne.n	8001540 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001530:	4b56      	ldr	r3, [pc, #344]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d121      	bne.n	8001580 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e09e      	b.n	800167e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d107      	bne.n	8001558 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d115      	bne.n	8001580 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e092      	b.n	800167e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001560:	4b4a      	ldr	r3, [pc, #296]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d109      	bne.n	8001580 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e086      	b.n	800167e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e07e      	b.n	800167e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001580:	4b42      	ldr	r3, [pc, #264]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 0203 	bic.w	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	493f      	ldr	r1, [pc, #252]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001592:	f7ff f8b1 	bl	80006f8 <HAL_GetTick>
 8001596:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001598:	e00a      	b.n	80015b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159a:	f7ff f8ad 	bl	80006f8 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e066      	b.n	800167e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 020c 	and.w	r2, r3, #12
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	429a      	cmp	r2, r3
 80015c0:	d1eb      	bne.n	800159a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ce:	4b2f      	ldr	r3, [pc, #188]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	492c      	ldr	r1, [pc, #176]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <HAL_RCC_ClockConfig+0x1b0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0307 	and.w	r3, r3, #7
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d210      	bcs.n	8001610 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_RCC_ClockConfig+0x1b0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0207 	bic.w	r2, r3, #7
 80015f6:	4924      	ldr	r1, [pc, #144]	; (8001688 <HAL_RCC_ClockConfig+0x1b0>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_RCC_ClockConfig+0x1b0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e036      	b.n	800167e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4918      	ldr	r1, [pc, #96]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4910      	ldr	r1, [pc, #64]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800164e:	f000 f825 	bl	800169c <HAL_RCC_GetSysClockFreq>
 8001652:	4601      	mov	r1, r0
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_RCC_ClockConfig+0x1b4>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	fa21 f303 	lsr.w	r3, r1, r3
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_RCC_ClockConfig+0x1c0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fff0 	bl	8000658 <HAL_InitTick>
 8001678:	4603      	mov	r3, r0
 800167a:	72fb      	strb	r3, [r7, #11]

  return status;
 800167c:	7afb      	ldrb	r3, [r7, #11]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000
 800168c:	40021000 	.word	0x40021000
 8001690:	080028a0 	.word	0x080028a0
 8001694:	20000004 	.word	0x20000004
 8001698:	20000008 	.word	0x20000008

0800169c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x34>
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b0c      	cmp	r3, #12
 80016c8:	d121      	bne.n	800170e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d11e      	bne.n	800170e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80016d0:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d107      	bne.n	80016ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80016dc:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e2:	0a1b      	lsrs	r3, r3, #8
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e005      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10d      	bne.n	8001724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d102      	bne.n	800171a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	e004      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b08      	cmp	r3, #8
 800171e:	d101      	bne.n	8001724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d133      	bne.n	8001792 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800172a:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d002      	beq.n	8001740 <HAL_RCC_GetSysClockFreq+0xa4>
 800173a:	2b03      	cmp	r3, #3
 800173c:	d003      	beq.n	8001746 <HAL_RCC_GetSysClockFreq+0xaa>
 800173e:	e005      	b.n	800174c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001742:	617b      	str	r3, [r7, #20]
      break;
 8001744:	e005      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001748:	617b      	str	r3, [r7, #20]
      break;
 800174a:	e002      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	617b      	str	r3, [r7, #20]
      break;
 8001750:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	3301      	adds	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	fb02 f203 	mul.w	r2, r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x104>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	0e5b      	lsrs	r3, r3, #25
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	3301      	adds	r3, #1
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001792:	69bb      	ldr	r3, [r7, #24]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3724      	adds	r7, #36	; 0x24
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	080028b0 	.word	0x080028b0
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	007a1200 	.word	0x007a1200

080017b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017c8:	f7ff fa02 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 80017cc:	6178      	str	r0, [r7, #20]
 80017ce:	e014      	b.n	80017fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	4a24      	ldr	r2, [pc, #144]	; (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6593      	str	r3, [r2, #88]	; 0x58
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017e8:	f7ff f9f2 	bl	8000bd0 <HAL_PWREx_GetVoltageRange>
 80017ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001800:	d10b      	bne.n	800181a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b80      	cmp	r3, #128	; 0x80
 8001806:	d919      	bls.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2ba0      	cmp	r3, #160	; 0xa0
 800180c:	d902      	bls.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800180e:	2302      	movs	r3, #2
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e013      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001814:	2301      	movs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	e010      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b80      	cmp	r3, #128	; 0x80
 800181e:	d902      	bls.n	8001826 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001820:	2303      	movs	r3, #3
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	e00a      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b80      	cmp	r3, #128	; 0x80
 800182a:	d102      	bne.n	8001832 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800182c:	2302      	movs	r3, #2
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	e004      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b70      	cmp	r3, #112	; 0x70
 8001836:	d101      	bne.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 0207 	bic.w	r2, r3, #7
 8001844:	4909      	ldr	r1, [pc, #36]	; (800186c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	429a      	cmp	r2, r3
 8001858:	d001      	beq.n	800185e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	40022000 	.word	0x40022000

08001870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e049      	b.n	8001916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe fde0 	bl	800045c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f000 fb3e 	bl	8001f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e049      	b.n	80019c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d106      	bne.n	800194a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f841 	bl	80019cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3304      	adds	r3, #4
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f000 fae7 	bl	8001f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_TIM_PWM_Start+0x24>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	e03c      	b.n	8001a7e <HAL_TIM_PWM_Start+0x9e>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d109      	bne.n	8001a1e <HAL_TIM_PWM_Start+0x3e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	bf14      	ite	ne
 8001a16:	2301      	movne	r3, #1
 8001a18:	2300      	moveq	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	e02f      	b.n	8001a7e <HAL_TIM_PWM_Start+0x9e>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d109      	bne.n	8001a38 <HAL_TIM_PWM_Start+0x58>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e022      	b.n	8001a7e <HAL_TIM_PWM_Start+0x9e>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d109      	bne.n	8001a52 <HAL_TIM_PWM_Start+0x72>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	bf14      	ite	ne
 8001a4a:	2301      	movne	r3, #1
 8001a4c:	2300      	moveq	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	e015      	b.n	8001a7e <HAL_TIM_PWM_Start+0x9e>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b10      	cmp	r3, #16
 8001a56:	d109      	bne.n	8001a6c <HAL_TIM_PWM_Start+0x8c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	e008      	b.n	8001a7e <HAL_TIM_PWM_Start+0x9e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	bf14      	ite	ne
 8001a78:	2301      	movne	r3, #1
 8001a7a:	2300      	moveq	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e07e      	b.n	8001b84 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <HAL_TIM_PWM_Start+0xb6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a94:	e023      	b.n	8001ade <HAL_TIM_PWM_Start+0xfe>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d104      	bne.n	8001aa6 <HAL_TIM_PWM_Start+0xc6>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa4:	e01b      	b.n	8001ade <HAL_TIM_PWM_Start+0xfe>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d104      	bne.n	8001ab6 <HAL_TIM_PWM_Start+0xd6>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ab4:	e013      	b.n	8001ade <HAL_TIM_PWM_Start+0xfe>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d104      	bne.n	8001ac6 <HAL_TIM_PWM_Start+0xe6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ac4:	e00b      	b.n	8001ade <HAL_TIM_PWM_Start+0xfe>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d104      	bne.n	8001ad6 <HAL_TIM_PWM_Start+0xf6>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ad4:	e003      	b.n	8001ade <HAL_TIM_PWM_Start+0xfe>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fd9e 	bl	8002628 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_TIM_PWM_Start+0x1ac>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d009      	beq.n	8001b0a <HAL_TIM_PWM_Start+0x12a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a25      	ldr	r2, [pc, #148]	; (8001b90 <HAL_TIM_PWM_Start+0x1b0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d004      	beq.n	8001b0a <HAL_TIM_PWM_Start+0x12a>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <HAL_TIM_PWM_Start+0x1b4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_TIM_PWM_Start+0x12e>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_TIM_PWM_Start+0x130>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d007      	beq.n	8001b24 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_TIM_PWM_Start+0x1ac>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d009      	beq.n	8001b42 <HAL_TIM_PWM_Start+0x162>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b36:	d004      	beq.n	8001b42 <HAL_TIM_PWM_Start+0x162>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_TIM_PWM_Start+0x1b0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d115      	bne.n	8001b6e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689a      	ldr	r2, [r3, #8]
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_TIM_PWM_Start+0x1b8>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b06      	cmp	r3, #6
 8001b52:	d015      	beq.n	8001b80 <HAL_TIM_PWM_Start+0x1a0>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5a:	d011      	beq.n	8001b80 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f042 0201 	orr.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6c:	e008      	b.n	8001b80 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e000      	b.n	8001b82 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40014000 	.word	0x40014000
 8001b94:	40014400 	.word	0x40014400
 8001b98:	00010007 	.word	0x00010007

08001b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e0fd      	b.n	8001db2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b14      	cmp	r3, #20
 8001bc2:	f200 80f0 	bhi.w	8001da6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8001bc6:	a201      	add	r2, pc, #4	; (adr r2, 8001bcc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bcc:	08001c21 	.word	0x08001c21
 8001bd0:	08001da7 	.word	0x08001da7
 8001bd4:	08001da7 	.word	0x08001da7
 8001bd8:	08001da7 	.word	0x08001da7
 8001bdc:	08001c61 	.word	0x08001c61
 8001be0:	08001da7 	.word	0x08001da7
 8001be4:	08001da7 	.word	0x08001da7
 8001be8:	08001da7 	.word	0x08001da7
 8001bec:	08001ca3 	.word	0x08001ca3
 8001bf0:	08001da7 	.word	0x08001da7
 8001bf4:	08001da7 	.word	0x08001da7
 8001bf8:	08001da7 	.word	0x08001da7
 8001bfc:	08001ce3 	.word	0x08001ce3
 8001c00:	08001da7 	.word	0x08001da7
 8001c04:	08001da7 	.word	0x08001da7
 8001c08:	08001da7 	.word	0x08001da7
 8001c0c:	08001d25 	.word	0x08001d25
 8001c10:	08001da7 	.word	0x08001da7
 8001c14:	08001da7 	.word	0x08001da7
 8001c18:	08001da7 	.word	0x08001da7
 8001c1c:	08001d65 	.word	0x08001d65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f9e6 	bl	8001ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0208 	orr.w	r2, r2, #8
 8001c3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0204 	bic.w	r2, r2, #4
 8001c4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6999      	ldr	r1, [r3, #24]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	619a      	str	r2, [r3, #24]
      break;
 8001c5e:	e0a3      	b.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fa42 	bl	80020f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6999      	ldr	r1, [r3, #24]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	021a      	lsls	r2, r3, #8
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	619a      	str	r2, [r3, #24]
      break;
 8001ca0:	e082      	b.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fa9b 	bl	80021e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0208 	orr.w	r2, r2, #8
 8001cbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69da      	ldr	r2, [r3, #28]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0204 	bic.w	r2, r2, #4
 8001ccc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69d9      	ldr	r1, [r3, #28]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	61da      	str	r2, [r3, #28]
      break;
 8001ce0:	e062      	b.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 faf3 	bl	80022d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	69da      	ldr	r2, [r3, #28]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69d9      	ldr	r1, [r3, #28]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	021a      	lsls	r2, r3, #8
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	61da      	str	r2, [r3, #28]
      break;
 8001d22:	e041      	b.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fb30 	bl	8002390 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0208 	orr.w	r2, r2, #8
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0204 	bic.w	r2, r2, #4
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001d62:	e021      	b.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fb68 	bl	8002440 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	021a      	lsls	r2, r3, #8
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001da4:	e000      	b.n	8001da8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8001da6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop

08001dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_TIM_ConfigClockSource+0x18>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e0a8      	b.n	8001f26 <HAL_TIM_ConfigClockSource+0x16a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001df6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dfe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b40      	cmp	r3, #64	; 0x40
 8001e0e:	d067      	beq.n	8001ee0 <HAL_TIM_ConfigClockSource+0x124>
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	d80b      	bhi.n	8001e2c <HAL_TIM_ConfigClockSource+0x70>
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d073      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x144>
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	d802      	bhi.n	8001e22 <HAL_TIM_ConfigClockSource+0x66>
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d06f      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e20:	e078      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d06c      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x144>
 8001e26:	2b30      	cmp	r3, #48	; 0x30
 8001e28:	d06a      	beq.n	8001f00 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8001e2a:	e073      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001e2c:	2b70      	cmp	r3, #112	; 0x70
 8001e2e:	d00d      	beq.n	8001e4c <HAL_TIM_ConfigClockSource+0x90>
 8001e30:	2b70      	cmp	r3, #112	; 0x70
 8001e32:	d804      	bhi.n	8001e3e <HAL_TIM_ConfigClockSource+0x82>
 8001e34:	2b50      	cmp	r3, #80	; 0x50
 8001e36:	d033      	beq.n	8001ea0 <HAL_TIM_ConfigClockSource+0xe4>
 8001e38:	2b60      	cmp	r3, #96	; 0x60
 8001e3a:	d041      	beq.n	8001ec0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8001e3c:	e06a      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e42:	d066      	beq.n	8001f12 <HAL_TIM_ConfigClockSource+0x156>
 8001e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e48:	d017      	beq.n	8001e7a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8001e4a:	e063      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f000 fbc4 	bl	80025e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	609a      	str	r2, [r3, #8]
      break;
 8001e78:	e04c      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6899      	ldr	r1, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f000 fbad 	bl	80025e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e9c:	609a      	str	r2, [r3, #8]
      break;
 8001e9e:	e039      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	461a      	mov	r2, r3
 8001eae:	f000 fb21 	bl	80024f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2150      	movs	r1, #80	; 0x50
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f000 fb7a 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 8001ebe:	e029      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f000 fb40 	bl	8002552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2160      	movs	r1, #96	; 0x60
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fb6a 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 8001ede:	e019      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	461a      	mov	r2, r3
 8001eee:	f000 fb01 	bl	80024f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 fb5a 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 8001efe:	e009      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	f000 fb51 	bl	80025b2 <TIM_ITRx_SetConfig>
        break;
 8001f10:	e000      	b.n	8001f14 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8001f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <TIM_Base_SetConfig+0xbc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d003      	beq.n	8001f50 <TIM_Base_SetConfig+0x20>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4e:	d108      	bne.n	8001f62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <TIM_Base_SetConfig+0xbc>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d00b      	beq.n	8001f82 <TIM_Base_SetConfig+0x52>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d007      	beq.n	8001f82 <TIM_Base_SetConfig+0x52>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1e      	ldr	r2, [pc, #120]	; (8001ff0 <TIM_Base_SetConfig+0xc0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d003      	beq.n	8001f82 <TIM_Base_SetConfig+0x52>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	; (8001ff4 <TIM_Base_SetConfig+0xc4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d108      	bne.n	8001f94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <TIM_Base_SetConfig+0xbc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <TIM_Base_SetConfig+0xa0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <TIM_Base_SetConfig+0xc0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <TIM_Base_SetConfig+0xa0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <TIM_Base_SetConfig+0xc4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d103      	bne.n	8001fd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	615a      	str	r2, [r3, #20]
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40014000 	.word	0x40014000
 8001ff4:	40014400 	.word	0x40014400

08001ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	f023 0201 	bic.w	r2, r3, #1
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0303 	bic.w	r3, r3, #3
 8002032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f023 0302 	bic.w	r3, r3, #2
 8002044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <TIM_OC1_SetConfig+0xec>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <TIM_OC1_SetConfig+0x70>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <TIM_OC1_SetConfig+0xf0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <TIM_OC1_SetConfig+0x70>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a22      	ldr	r2, [pc, #136]	; (80020ec <TIM_OC1_SetConfig+0xf4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d10c      	bne.n	8002082 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f023 0308 	bic.w	r3, r3, #8
 800206e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <TIM_OC1_SetConfig+0xec>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <TIM_OC1_SetConfig+0xa2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a16      	ldr	r2, [pc, #88]	; (80020e8 <TIM_OC1_SetConfig+0xf0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d003      	beq.n	800209a <TIM_OC1_SetConfig+0xa2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a15      	ldr	r2, [pc, #84]	; (80020ec <TIM_OC1_SetConfig+0xf4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d111      	bne.n	80020be <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	621a      	str	r2, [r3, #32]
}
 80020d8:	bf00      	nop
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40012c00 	.word	0x40012c00
 80020e8:	40014000 	.word	0x40014000
 80020ec:	40014400 	.word	0x40014400

080020f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	f023 0210 	bic.w	r2, r3, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800212a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0320 	bic.w	r3, r3, #32
 800213e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <TIM_OC2_SetConfig+0xe8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10d      	bne.n	8002170 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800215a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800216e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <TIM_OC2_SetConfig+0xe8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_OC2_SetConfig+0x98>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a18      	ldr	r2, [pc, #96]	; (80021dc <TIM_OC2_SetConfig+0xec>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_OC2_SetConfig+0x98>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <TIM_OC2_SetConfig+0xf0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d113      	bne.n	80021b0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800218e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	621a      	str	r2, [r3, #32]
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40014000 	.word	0x40014000
 80021e0:	40014400 	.word	0x40014400

080021e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a21      	ldr	r2, [pc, #132]	; (80022c8 <TIM_OC3_SetConfig+0xe4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10d      	bne.n	8002262 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800224c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <TIM_OC3_SetConfig+0xe4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <TIM_OC3_SetConfig+0x96>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a17      	ldr	r2, [pc, #92]	; (80022cc <TIM_OC3_SetConfig+0xe8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d003      	beq.n	800227a <TIM_OC3_SetConfig+0x96>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <TIM_OC3_SetConfig+0xec>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d113      	bne.n	80022a2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	621a      	str	r2, [r3, #32]
}
 80022bc:	bf00      	nop
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40014000 	.word	0x40014000
 80022d0:	40014400 	.word	0x40014400

080022d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	031b      	lsls	r3, r3, #12
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <TIM_OC4_SetConfig+0xb0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d007      	beq.n	8002348 <TIM_OC4_SetConfig+0x74>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <TIM_OC4_SetConfig+0xb4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <TIM_OC4_SetConfig+0x74>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <TIM_OC4_SetConfig+0xb8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d109      	bne.n	800235c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800234e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	621a      	str	r2, [r3, #32]
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40014000 	.word	0x40014000
 800238c:	40014400 	.word	0x40014400

08002390 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80023d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	041b      	lsls	r3, r3, #16
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <TIM_OC5_SetConfig+0xa4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <TIM_OC5_SetConfig+0x6a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <TIM_OC5_SetConfig+0xa8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d003      	beq.n	80023fa <TIM_OC5_SetConfig+0x6a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a11      	ldr	r2, [pc, #68]	; (800243c <TIM_OC5_SetConfig+0xac>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d109      	bne.n	800240e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002400:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	621a      	str	r2, [r3, #32]
}
 8002428:	bf00      	nop
 800242a:	371c      	adds	r7, #28
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40014000 	.word	0x40014000
 800243c:	40014400 	.word	0x40014400

08002440 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	051b      	lsls	r3, r3, #20
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <TIM_OC6_SetConfig+0xa8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <TIM_OC6_SetConfig+0x6c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a13      	ldr	r2, [pc, #76]	; (80024ec <TIM_OC6_SetConfig+0xac>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <TIM_OC6_SetConfig+0x6c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <TIM_OC6_SetConfig+0xb0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d109      	bne.n	80024c0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	621a      	str	r2, [r3, #32]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40012c00 	.word	0x40012c00
 80024ec:	40014000 	.word	0x40014000
 80024f0:	40014400 	.word	0x40014400

080024f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0201 	bic.w	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f023 030a 	bic.w	r3, r3, #10
 8002530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	621a      	str	r2, [r3, #32]
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002552:	b480      	push	{r7}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f023 0210 	bic.w	r2, r3, #16
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800257c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	031b      	lsls	r3, r3, #12
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800258e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	621a      	str	r2, [r3, #32]
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f043 0307 	orr.w	r3, r3, #7
 80025d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	021a      	lsls	r2, r3, #8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	431a      	orrs	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	2201      	movs	r2, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6a1a      	ldr	r2, [r3, #32]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	43db      	mvns	r3, r3
 800264a:	401a      	ands	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a1a      	ldr	r2, [r3, #32]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	431a      	orrs	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	621a      	str	r2, [r3, #32]
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002688:	2302      	movs	r3, #2
 800268a:	e04f      	b.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a21      	ldr	r2, [pc, #132]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d108      	bne.n	80026c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80026bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a14      	ldr	r2, [pc, #80]	; (8002738 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d009      	beq.n	8002700 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f4:	d004      	beq.n	8002700 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d10c      	bne.n	800271a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	4313      	orrs	r3, r2
 8002710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	40012c00 	.word	0x40012c00
 800273c:	40014000 	.word	0x40014000

08002740 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002758:	2302      	movs	r3, #2
 800275a:	e060      	b.n	800281e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d115      	bne.n	800280c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	051b      	lsls	r3, r3, #20
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4313      	orrs	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40012c00 	.word	0x40012c00

08002830 <__libc_init_array>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	4e0d      	ldr	r6, [pc, #52]	; (8002868 <__libc_init_array+0x38>)
 8002834:	4c0d      	ldr	r4, [pc, #52]	; (800286c <__libc_init_array+0x3c>)
 8002836:	1ba4      	subs	r4, r4, r6
 8002838:	10a4      	asrs	r4, r4, #2
 800283a:	2500      	movs	r5, #0
 800283c:	42a5      	cmp	r5, r4
 800283e:	d109      	bne.n	8002854 <__libc_init_array+0x24>
 8002840:	4e0b      	ldr	r6, [pc, #44]	; (8002870 <__libc_init_array+0x40>)
 8002842:	4c0c      	ldr	r4, [pc, #48]	; (8002874 <__libc_init_array+0x44>)
 8002844:	f000 f820 	bl	8002888 <_init>
 8002848:	1ba4      	subs	r4, r4, r6
 800284a:	10a4      	asrs	r4, r4, #2
 800284c:	2500      	movs	r5, #0
 800284e:	42a5      	cmp	r5, r4
 8002850:	d105      	bne.n	800285e <__libc_init_array+0x2e>
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002858:	4798      	blx	r3
 800285a:	3501      	adds	r5, #1
 800285c:	e7ee      	b.n	800283c <__libc_init_array+0xc>
 800285e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002862:	4798      	blx	r3
 8002864:	3501      	adds	r5, #1
 8002866:	e7f2      	b.n	800284e <__libc_init_array+0x1e>
 8002868:	080028e0 	.word	0x080028e0
 800286c:	080028e0 	.word	0x080028e0
 8002870:	080028e0 	.word	0x080028e0
 8002874:	080028e4 	.word	0x080028e4

08002878 <memset>:
 8002878:	4402      	add	r2, r0
 800287a:	4603      	mov	r3, r0
 800287c:	4293      	cmp	r3, r2
 800287e:	d100      	bne.n	8002882 <memset+0xa>
 8002880:	4770      	bx	lr
 8002882:	f803 1b01 	strb.w	r1, [r3], #1
 8002886:	e7f9      	b.n	800287c <memset+0x4>

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
