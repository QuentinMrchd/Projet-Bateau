
servoax12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000336c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003540  08003540  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003540  08003540  00013540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003548  08003548  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000010  08003560  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003560  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ada0  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a11  00000000  00000000  0002ade0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d8  00000000  00000000  0002c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  0002d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021879  00000000  00000000  0002dad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008147  00000000  00000000  0004f349  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca3c2  00000000  00000000  00057490  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00121852  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002774  00000000  00000000  001218d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080034e0 	.word	0x080034e0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080034e0 	.word	0x080034e0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
uint8_t servoErrorCode = 0;
/* USER CODE END 0 */


int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t angle=512;
 80004d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004d6:	80fb      	strh	r3, [r7, #6]
	uint16_t delta=10;
 80004d8:	230a      	movs	r3, #10
 80004da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fb9a 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f8c4 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f994 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f932 	bl	8000750 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004ec:	f000 f960 	bl	80007b0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Buffer[0]='U';
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <main+0x6c>)
 80004f2:	2255      	movs	r2, #85	; 0x55
 80004f4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setAngleLimit(4, 0, 1023);
//  setServoAngle(4, angle);
  reset(4);
 80004f6:	2004      	movs	r0, #4
 80004f8:	f000 f876 	bl	80005e8 <reset>
  //turn(4, RIGHT,80);
  while (1)
  {
    /* USER CODE END WHILE */
   if (angle>700)
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000502:	d905      	bls.n	8000510 <main+0x44>
   {
	   angle=700;
 8000504:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8000508:	80fb      	strh	r3, [r7, #6]
	 delta=-5;
 800050a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800050e:	80bb      	strh	r3, [r7, #4]
   }
   if (angle<200){
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	2bc7      	cmp	r3, #199	; 0xc7
 8000514:	d803      	bhi.n	800051e <main+0x52>
	   angle=200;
 8000516:	23c8      	movs	r3, #200	; 0xc8
 8000518:	80fb      	strh	r3, [r7, #6]
	   delta=+5;
 800051a:	2305      	movs	r3, #5
 800051c:	80bb      	strh	r3, [r7, #4]
   }
    /* USER CODE BEGIN 3 */
	  HAL_Delay (20); /* Insert delay 100 ms */
 800051e:	2014      	movs	r0, #20
 8000520:	f000 fbf4 	bl	8000d0c <HAL_Delay>
	 // getServoAngle(4, &angle);
	move(2, angle);
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	4619      	mov	r1, r3
 8000528:	2002      	movs	r0, #2
 800052a:	f000 f807 	bl	800053c <move>
	angle+=delta;
 800052e:	88fa      	ldrh	r2, [r7, #6]
 8000530:	88bb      	ldrh	r3, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	80fb      	strh	r3, [r7, #6]
  {
 8000536:	e7e1      	b.n	80004fc <main+0x30>
 8000538:	200000cc 	.word	0x200000cc

0800053c <move>:


/*----------------------------------------------------------------*/

void move(uint8_t ID, uint16_t Position)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	460a      	mov	r2, r1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	4613      	mov	r3, r2
 800054a:	80bb      	strh	r3, [r7, #4]
	uint8_t packet[9];
    uint8_t Position_H,Position_L;
	uint8_t pdata[8];
	HAL_StatusTypeDef val;

    Position_H = Position >> 8;           // 16 bits - 2 x 8 bits variables
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	0a1b      	lsrs	r3, r3, #8
 8000550:	b29b      	uxth	r3, r3
 8000552:	77fb      	strb	r3, [r7, #31]
    Position_L = Position;
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	77bb      	strb	r3, [r7, #30]
    //unsigned char packet[length];

	Checksum = (~(ID + AX_GOAL_LENGTH + AX_WRITE_DATA + AX_GOAL_POSITION_L + Position_L + Position_H)) & 0xFF;
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	7fbb      	ldrb	r3, [r7, #30]
 800055c:	4413      	add	r3, r2
 800055e:	b2da      	uxtb	r2, r3
 8000560:	7ffb      	ldrb	r3, [r7, #31]
 8000562:	4413      	add	r3, r2
 8000564:	b2db      	uxtb	r3, r3
 8000566:	3326      	adds	r3, #38	; 0x26
 8000568:	b2db      	uxtb	r3, r3
 800056a:	43db      	mvns	r3, r3
 800056c:	777b      	strb	r3, [r7, #29]

    packet[0] = AX_START;
 800056e:	23ff      	movs	r3, #255	; 0xff
 8000570:	743b      	strb	r3, [r7, #16]
    packet[1] = AX_START;
 8000572:	23ff      	movs	r3, #255	; 0xff
 8000574:	747b      	strb	r3, [r7, #17]
    packet[2] = ID;
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	74bb      	strb	r3, [r7, #18]
    packet[3] = AX_GOAL_LENGTH;
 800057a:	2305      	movs	r3, #5
 800057c:	74fb      	strb	r3, [r7, #19]
    packet[4] = AX_WRITE_DATA;
 800057e:	2303      	movs	r3, #3
 8000580:	753b      	strb	r3, [r7, #20]
    packet[5] = AX_GOAL_POSITION_L;
 8000582:	231e      	movs	r3, #30
 8000584:	757b      	strb	r3, [r7, #21]
    packet[6] = Position_L;
 8000586:	7fbb      	ldrb	r3, [r7, #30]
 8000588:	75bb      	strb	r3, [r7, #22]
    packet[7] = Position_H;
 800058a:	7ffb      	ldrb	r3, [r7, #31]
 800058c:	75fb      	strb	r3, [r7, #23]
    packet[8] = Checksum;
 800058e:	7f7b      	ldrb	r3, [r7, #29]
 8000590:	763b      	strb	r3, [r7, #24]


    val=HAL_UART_Receive(&huart3, pdata, 2, 100);
 8000592:	f107 0108 	add.w	r1, r7, #8
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	2202      	movs	r2, #2
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <move+0xa4>)
 800059c:	f002 f959 	bl	8002852 <HAL_UART_Receive>
 80005a0:	4603      	mov	r3, r0
 80005a2:	773b      	strb	r3, [r7, #28]
    //return (sendAXPacket(packet, length));
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);//passer en mode transmission
 80005a4:	2200      	movs	r2, #0
 80005a6:	2102      	movs	r1, #2
 80005a8:	480e      	ldr	r0, [pc, #56]	; (80005e4 <move+0xa8>)
 80005aa:	f000 fe9d 	bl	80012e8 <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart3, packet, 9, 100);
 80005ae:	f107 0110 	add.w	r1, r7, #16
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	2209      	movs	r2, #9
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <move+0xa4>)
 80005b8:	f002 f8b8 	bl	800272c <HAL_UART_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2102      	movs	r1, #2
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <move+0xa8>)
 80005c2:	f000 fe91 	bl	80012e8 <HAL_GPIO_WritePin>
    val=HAL_UART_Receive(&huart3, pdata, 6, 100);
 80005c6:	f107 0108 	add.w	r1, r7, #8
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	2206      	movs	r2, #6
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <move+0xa4>)
 80005d0:	f002 f93f 	bl	8002852 <HAL_UART_Receive>
 80005d4:	4603      	mov	r3, r0
 80005d6:	773b      	strb	r3, [r7, #28]
    return ;
 80005d8:	bf00      	nop
}
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000004c 	.word	0x2000004c
 80005e4:	48000400 	.word	0x48000400

080005e8 <reset>:

/*----------------------------------------------------------------*/

int reset(uint8_t ID)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
		HAL_StatusTypeDef val;
		uint8_t packet[11];
	    uint8_t Position_H,Position_L,Speed_H,Speed_L;
		uint8_t pdata[6];

	Checksum = (~(ID + AX_RESET_LENGTH + AX_RESET)) & 0xFF;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3308      	adds	r3, #8
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	77fb      	strb	r3, [r7, #31]

	packet[0] = AX_START;
 80005fc:	23ff      	movs	r3, #255	; 0xff
 80005fe:	743b      	strb	r3, [r7, #16]
	packet[1] = AX_START;
 8000600:	23ff      	movs	r3, #255	; 0xff
 8000602:	747b      	strb	r3, [r7, #17]
	packet[2] = ID;
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	74bb      	strb	r3, [r7, #18]
	packet[3] = AX_RESET_LENGTH;
 8000608:	2302      	movs	r3, #2
 800060a:	74fb      	strb	r3, [r7, #19]
	packet[4] = AX_RESET;
 800060c:	2306      	movs	r3, #6
 800060e:	753b      	strb	r3, [r7, #20]
	packet[5] = Checksum;
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	757b      	strb	r3, [r7, #21]

	val=HAL_UART_Receive(&huart3, pdata, 2, 100);
 8000614:	f107 0108 	add.w	r1, r7, #8
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	2202      	movs	r2, #2
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <reset+0x7c>)
 800061e:	f002 f918 	bl	8002852 <HAL_UART_Receive>
 8000622:	4603      	mov	r3, r0
 8000624:	77bb      	strb	r3, [r7, #30]
	    //return (sendAXPacket(packet, length));
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);//passer en mode transmission
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	480f      	ldr	r0, [pc, #60]	; (8000668 <reset+0x80>)
 800062c:	f000 fe5c 	bl	80012e8 <HAL_GPIO_WritePin>
	    HAL_UART_Transmit(&huart3, packet, 8, 100);
 8000630:	f107 0110 	add.w	r1, r7, #16
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	2208      	movs	r2, #8
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <reset+0x7c>)
 800063a:	f002 f877 	bl	800272c <HAL_UART_Transmit>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2102      	movs	r1, #2
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <reset+0x80>)
 8000644:	f000 fe50 	bl	80012e8 <HAL_GPIO_WritePin>
	    val=HAL_UART_Receive(&huart3, pdata, 8, 100);
 8000648:	f107 0108 	add.w	r1, r7, #8
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	2208      	movs	r2, #8
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <reset+0x7c>)
 8000652:	f002 f8fe 	bl	8002852 <HAL_UART_Receive>
 8000656:	4603      	mov	r3, r0
 8000658:	77bb      	strb	r3, [r7, #30]
	    return 1;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000004c 	.word	0x2000004c
 8000668:	48000400 	.word	0x48000400

0800066c <SystemClock_Config>:
	return (read_error());              // Return the read error
}
*/
/*--------------------------------------------------------------*/
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0ae      	sub	sp, #184	; 0xb8
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000676:	2244      	movs	r2, #68	; 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f002 ff28 	bl	80034d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2260      	movs	r2, #96	; 0x60
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f002 ff1a 	bl	80034d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c0:	230a      	movs	r3, #10
 80006c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006c6:	2307      	movs	r3, #7
 80006c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe7f 	bl	80013e0 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006e8:	f000 f91e 	bl	8000928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000700:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fa8a 	bl	8001c20 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000712:	f000 f909 	bl	8000928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 8000716:	2306      	movs	r3, #6
 8000718:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fc7f 	bl	8002028 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000730:	f000 f8fa 	bl	8000928 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000734:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000738:	f000 fdfc 	bl	8001334 <HAL_PWREx_ControlVoltageScaling>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000742:	f000 f8f1 	bl	8000928 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	37b8      	adds	r7, #184	; 0xb8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_USART2_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x58>)
 8000794:	f001 ff7c 	bl	8002690 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8c3 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000d8 	.word	0x200000d8
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <MX_USART3_UART_Init+0x58>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 912000;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007bc:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_USART3_UART_Init+0x5c>)
 80007be:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007d4:	220c      	movs	r2, #12
 80007d6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_USART3_UART_Init+0x54>)
 80007f2:	f001 ff4d 	bl	8002690 <HAL_UART_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 80007fc:	f000 f894 	bl	8000928 <Error_Handler>
  /* USER CODE BEGIN USART3_Init 2 */
//  USART3->CR1|=1<<5;
//  HAL_UART_MspInit(&huart3);
  /* USER CODE END USART3_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000004c 	.word	0x2000004c
 8000808:	40004800 	.word	0x40004800
 800080c:	000dea80 	.word	0x000dea80

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <MX_GPIO_Init+0x108>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a3b      	ldr	r2, [pc, #236]	; (8000918 <MX_GPIO_Init+0x108>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b39      	ldr	r3, [pc, #228]	; (8000918 <MX_GPIO_Init+0x108>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b36      	ldr	r3, [pc, #216]	; (8000918 <MX_GPIO_Init+0x108>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a35      	ldr	r2, [pc, #212]	; (8000918 <MX_GPIO_Init+0x108>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b33      	ldr	r3, [pc, #204]	; (8000918 <MX_GPIO_Init+0x108>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <MX_GPIO_Init+0x108>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <MX_GPIO_Init+0x108>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_GPIO_Init+0x108>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_GPIO_Init+0x108>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a29      	ldr	r2, [pc, #164]	; (8000918 <MX_GPIO_Init+0x108>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_GPIO_Init+0x108>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	21b0      	movs	r1, #176	; 0xb0
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f000 fd2b 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LD4_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f242 0102 	movw	r1, #8194	; 0x2002
 8000898:	4820      	ldr	r0, [pc, #128]	; (800091c <MX_GPIO_Init+0x10c>)
 800089a:	f000 fd25 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_GPIO_Init+0x110>)
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	481c      	ldr	r0, [pc, #112]	; (8000924 <MX_GPIO_Init+0x114>)
 80008b4:	f000 fb9e 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80008b8:	23b0      	movs	r3, #176	; 0xb0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d2:	f000 fb8f 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fb82 	bl	8000ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD4_Pin;
 80008f0:	f242 0302 	movw	r3, #8194	; 0x2002
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0x10c>)
 800090a:	f000 fb73 	bl	8000ff4 <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000
 800091c:	48000400 	.word	0x48000400
 8000920:	10210000 	.word	0x10210000
 8000924:	48000800 	.word	0x48000800

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	; 0x60
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	; 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a37      	ldr	r2, [pc, #220]	; (8000a7c <HAL_UART_MspInit+0xfc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d131      	bne.n	8000a06 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <HAL_UART_MspInit+0x100>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	4a36      	ldr	r2, [pc, #216]	; (8000a80 <HAL_UART_MspInit+0x100>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	6593      	str	r3, [r2, #88]	; 0x58
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <HAL_UART_MspInit+0x100>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <HAL_UART_MspInit+0x100>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a30      	ldr	r2, [pc, #192]	; (8000a80 <HAL_UART_MspInit+0x100>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <HAL_UART_MspInit+0x100>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d2:	230c      	movs	r3, #12
 80009d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f000 fb00 	bl	8000ff4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2026      	movs	r0, #38	; 0x26
 80009fa:	f000 fa84 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009fe:	2026      	movs	r0, #38	; 0x26
 8000a00:	f000 fa9d 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a04:	e035      	b.n	8000a72 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <HAL_UART_MspInit+0x104>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d130      	bne.n	8000a72 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <HAL_UART_MspInit+0x100>)
 8000a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a14:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <HAL_UART_MspInit+0x100>)
 8000a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_UART_MspInit+0x100>)
 8000a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0x100>)
 8000a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <HAL_UART_MspInit+0x100>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_UART_MspInit+0x100>)
 8000a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8000a40:	f44f 6301 	mov.w	r3, #2064	; 0x810
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a52:	2307      	movs	r3, #7
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480a      	ldr	r0, [pc, #40]	; (8000a88 <HAL_UART_MspInit+0x108>)
 8000a5e:	f000 fac9 	bl	8000ff4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	2027      	movs	r0, #39	; 0x27
 8000a68:	f000 fa4d 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a6c:	2027      	movs	r0, #39	; 0x27
 8000a6e:	f000 fa66 	bl	8000f3e <HAL_NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	; 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40004400 	.word	0x40004400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40004800 	.word	0x40004800
 8000a88:	48000800 	.word	0x48000800

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8f4 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <USART2_IRQHandler+0x10>)
 8000aee:	f001 ff7d 	bl	80029ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000d8 	.word	0x200000d8

08000afc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
//	if (USART_GetITStatus (USART3, USART_IT_RXNE))
//	{
//	HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//		const uint8_t byte = (uint8_t)USART_Receive (USART3); // grab the byte from the data register
//	HAL_UART_Receive(&huart3, byte, 1, 100);
	byte=USART3->RDR;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <USART3_IRQHandler+0x48>)
 8000b04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	71fb      	strb	r3, [r7, #7]
//	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b0a:	480f      	ldr	r0, [pc, #60]	; (8000b48 <USART3_IRQHandler+0x4c>)
 8000b0c:	f001 ff6e 	bl	80029ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  receiveBufferEnd++;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <USART3_IRQHandler+0x50>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <USART3_IRQHandler+0x50>)
 8000b18:	6013      	str	r3, [r2, #0]
  if (receiveBufferEnd >= receiveBuffer + REC_BUFFER_LEN)
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <USART3_IRQHandler+0x54>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f103 0220 	add.w	r2, r3, #32
 8000b22:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <USART3_IRQHandler+0x50>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d803      	bhi.n	8000b32 <USART3_IRQHandler+0x36>
      receiveBufferEnd = receiveBuffer;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <USART3_IRQHandler+0x54>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <USART3_IRQHandler+0x50>)
 8000b30:	6013      	str	r3, [r2, #0]

  *receiveBufferEnd = byte;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <USART3_IRQHandler+0x50>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004800 	.word	0x40004800
 8000b48:	2000004c 	.word	0x2000004c
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000158 	.word	0x20000158

08000b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <SystemInit+0x64>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <SystemInit+0x64>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <SystemInit+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <SystemInit+0x68>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <SystemInit+0x68>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SystemInit+0x68>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <SystemInit+0x68>)
 8000b80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <SystemInit+0x68>)
 8000b8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SystemInit+0x68>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <SystemInit+0x68>)
 8000b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <SystemInit+0x68>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SystemInit+0x64>)
 8000ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000baa:	609a      	str	r2, [r3, #8]
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff ffc6 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bc8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bca:	e003      	b.n	8000bd4 <LoopCopyDataInit>

08000bcc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bd0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bd2:	3104      	adds	r1, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bd4:	480a      	ldr	r0, [pc, #40]	; (8000c00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bd8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bda:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bdc:	d3f6      	bcc.n	8000bcc <CopyDataInit>
	ldr	r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000be0:	e002      	b.n	8000be8 <LoopFillZerobss>

08000be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000be2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000be4:	f842 3b04 	str.w	r3, [r2], #4

08000be8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <LoopForever+0x16>)
	cmp	r2, r3
 8000bea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bec:	d3f9      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f002 fc4b 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fc6b 	bl	80004cc <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000bfc:	08003550 	.word	0x08003550
	ldr	r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c04:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000c08:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000c0c:	2000017c 	.word	0x2000017c

08000c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_Init+0x3c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_Init+0x3c>)
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 f960 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f000 f80f 	bl	8000c54 <HAL_InitTick>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d002      	beq.n	8000c42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	e001      	b.n	8000c46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c42:	f7ff fe79 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c46:	79fb      	ldrb	r3, [r7, #7]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d023      	beq.n	8000cb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_InitTick+0x70>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f96b 	bl	8000f5a <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10f      	bne.n	8000caa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d809      	bhi.n	8000ca4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f935 	bl	8000f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_InitTick+0x74>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	e007      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e004      	b.n	8000cb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e001      	b.n	8000cb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000000c 	.word	0x2000000c
 8000cc4:	20000004 	.word	0x20000004
 8000cc8:	20000008 	.word	0x20000008

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	2000000c 	.word	0x2000000c
 8000cf0:	20000178 	.word	0x20000178

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000178 	.word	0x20000178

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff ffee 	bl	8000cf4 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_Delay+0x40>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffde 	bl	8000cf4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000000c 	.word	0x2000000c

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff3e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff31 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d005      	beq.n	8000f96 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e029      	b.n	8000fea <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 020e 	bic.w	r2, r2, #14
 8000fa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f003 021c 	and.w	r2, r3, #28
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	4798      	blx	r3
    }
  }
  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e154      	b.n	80012ae <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8146 	beq.w	80012a8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d00b      	beq.n	800103c <HAL_GPIO_Init+0x48>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001030:	2b11      	cmp	r3, #17
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b12      	cmp	r3, #18
 800103a:	d130      	bne.n	800109e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001072:	2201      	movs	r2, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	f003 0201 	and.w	r2, r3, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0xea>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d123      	bne.n	8001126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	6939      	ldr	r1, [r7, #16]
 8001122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0203 	and.w	r2, r3, #3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80a0 	beq.w	80012a8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001168:	4b58      	ldr	r3, [pc, #352]	; (80012cc <HAL_GPIO_Init+0x2d8>)
 800116a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116c:	4a57      	ldr	r2, [pc, #348]	; (80012cc <HAL_GPIO_Init+0x2d8>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	6613      	str	r3, [r2, #96]	; 0x60
 8001174:	4b55      	ldr	r3, [pc, #340]	; (80012cc <HAL_GPIO_Init+0x2d8>)
 8001176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001180:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011aa:	d019      	beq.n	80011e0 <HAL_GPIO_Init+0x1ec>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <HAL_GPIO_Init+0x2e0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d013      	beq.n	80011dc <HAL_GPIO_Init+0x1e8>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <HAL_GPIO_Init+0x2e4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d00d      	beq.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a47      	ldr	r2, [pc, #284]	; (80012dc <HAL_GPIO_Init+0x2e8>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d007      	beq.n	80011d4 <HAL_GPIO_Init+0x1e0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x2ec>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d101      	bne.n	80011d0 <HAL_GPIO_Init+0x1dc>
 80011cc:	2304      	movs	r3, #4
 80011ce:	e008      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d0:	2307      	movs	r3, #7
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d4:	2303      	movs	r3, #3
 80011d6:	e004      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011d8:	2302      	movs	r3, #2
 80011da:	e002      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <HAL_GPIO_Init+0x1ee>
 80011e0:	2300      	movs	r3, #0
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	f002 0203 	and.w	r2, r2, #3
 80011e8:	0092      	lsls	r2, r2, #2
 80011ea:	4093      	lsls	r3, r2
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f2:	4937      	ldr	r1, [pc, #220]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <HAL_GPIO_Init+0x2f0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001224:	4a2f      	ldr	r2, [pc, #188]	; (80012e4 <HAL_GPIO_Init+0x2f0>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_GPIO_Init+0x2f0>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800124e:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <HAL_GPIO_Init+0x2f0>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_GPIO_Init+0x2f0>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001278:	4a1a      	ldr	r2, [pc, #104]	; (80012e4 <HAL_GPIO_Init+0x2f0>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_GPIO_Init+0x2f0>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012a2:	4a10      	ldr	r2, [pc, #64]	; (80012e4 <HAL_GPIO_Init+0x2f0>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f aea3 	bne.w	8001004 <HAL_GPIO_Init+0x10>
  }
}
 80012be:	bf00      	nop
 80012c0:	371c      	adds	r7, #28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40010000 	.word	0x40010000
 80012d4:	48000400 	.word	0x48000400
 80012d8:	48000800 	.word	0x48000800
 80012dc:	48000c00 	.word	0x48000c00
 80012e0:	48001000 	.word	0x48001000
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001304:	e002      	b.n	800130c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_PWREx_GetVoltageRange+0x18>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40007000 	.word	0x40007000

08001334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001342:	d130      	bne.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800134c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001350:	d038      	beq.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800135a:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001360:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2232      	movs	r2, #50	; 0x32
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9b      	lsrs	r3, r3, #18
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001378:	e002      	b.n	8001380 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3b01      	subs	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138c:	d102      	bne.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x60>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f2      	bne.n	800137a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a0:	d110      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e00f      	b.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b2:	d007      	beq.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013bc:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40007000 	.word	0x40007000
 80013d8:	20000004 	.word	0x20000004
 80013dc:	431bde83 	.word	0x431bde83

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f000 bc11 	b.w	8001c16 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f4:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fe:	4b9e      	ldr	r3, [pc, #632]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80e4 	beq.w	80015de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <HAL_RCC_OscConfig+0x4c>
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b0c      	cmp	r3, #12
 8001420:	f040 808b 	bne.w	800153a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b01      	cmp	r3, #1
 8001428:	f040 8087 	bne.w	800153a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142c:	4b92      	ldr	r3, [pc, #584]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x64>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e3e8      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d004      	beq.n	800145e <HAL_RCC_OscConfig+0x7e>
 8001454:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800145c:	e005      	b.n	800146a <HAL_RCC_OscConfig+0x8a>
 800145e:	4b86      	ldr	r3, [pc, #536]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800146a:	4293      	cmp	r3, r2
 800146c:	d223      	bcs.n	80014b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fd78 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e3c9      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001482:	4b7d      	ldr	r3, [pc, #500]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a7c      	ldr	r2, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b7a      	ldr	r3, [pc, #488]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4977      	ldr	r1, [pc, #476]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a0:	4b75      	ldr	r3, [pc, #468]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	4972      	ldr	r1, [pc, #456]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
 80014b4:	e025      	b.n	8001502 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b6:	4b70      	ldr	r3, [pc, #448]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6f      	ldr	r2, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6d      	ldr	r3, [pc, #436]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	496a      	ldr	r1, [pc, #424]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	4965      	ldr	r1, [pc, #404]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fd38 	bl	8001f68 <RCC_SetFlashLatencyFromMSIRange>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e389      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001502:	f000 fc6f 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001506:	4601      	mov	r1, r0
 8001508:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	4a5a      	ldr	r2, [pc, #360]	; (800167c <HAL_RCC_OscConfig+0x29c>)
 8001514:	5cd3      	ldrb	r3, [r2, r3]
 8001516:	f003 031f 	and.w	r3, r3, #31
 800151a:	fa21 f303 	lsr.w	r3, r1, r3
 800151e:	4a58      	ldr	r2, [pc, #352]	; (8001680 <HAL_RCC_OscConfig+0x2a0>)
 8001520:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001522:	4b58      	ldr	r3, [pc, #352]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fb94 	bl	8000c54 <HAL_InitTick>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d052      	beq.n	80015dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	e36d      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d032      	beq.n	80015a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800154e:	f7ff fbd1 	bl	8000cf4 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001556:	f7ff fbcd 	bl	8000cf4 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e356      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001568:	4b43      	ldr	r3, [pc, #268]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001574:	4b40      	ldr	r3, [pc, #256]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a3f      	ldr	r2, [pc, #252]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	493a      	ldr	r1, [pc, #232]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001592:	4b39      	ldr	r3, [pc, #228]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	4935      	ldr	r1, [pc, #212]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
 80015a6:	e01a      	b.n	80015de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015a8:	4b33      	ldr	r3, [pc, #204]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a32      	ldr	r2, [pc, #200]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb9e 	bl	8000cf4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015bc:	f7ff fb9a 	bl	8000cf4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e323      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x1dc>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d073      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x21c>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d10e      	bne.n	8001614 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d10b      	bne.n	8001614 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d063      	beq.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d15f      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e300      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x24c>
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0x288>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x270>
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0x288>
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_RCC_OscConfig+0x298>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01b      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fb40 	bl	8000cf4 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001676:	e010      	b.n	800169a <HAL_RCC_OscConfig+0x2ba>
 8001678:	40021000 	.word	0x40021000
 800167c:	080034f8 	.word	0x080034f8
 8001680:	20000004 	.word	0x20000004
 8001684:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fb34 	bl	8000cf4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e2bd      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169a:	4baf      	ldr	r3, [pc, #700]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x2a8>
 80016a6:	e014      	b.n	80016d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb24 	bl	8000cf4 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fb20 	bl	8000cf4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e2a9      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c2:	4ba5      	ldr	r3, [pc, #660]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x2d0>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d060      	beq.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x310>
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d119      	bne.n	800171e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d116      	bne.n	800171e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f0:	4b99      	ldr	r3, [pc, #612]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x328>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e286      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b93      	ldr	r3, [pc, #588]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	4990      	ldr	r1, [pc, #576]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171c:	e040      	b.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d023      	beq.n	800176e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001726:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a8b      	ldr	r2, [pc, #556]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff fadf 	bl	8000cf4 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173a:	f7ff fadb 	bl	8000cf4 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e264      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800174c:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b7f      	ldr	r3, [pc, #508]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	497c      	ldr	r1, [pc, #496]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
 800176c:	e018      	b.n	80017a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176e:	4b7a      	ldr	r3, [pc, #488]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a79      	ldr	r2, [pc, #484]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 8001774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fabb 	bl	8000cf4 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7ff fab7 	bl	8000cf4 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e240      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001794:	4b70      	ldr	r3, [pc, #448]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d03c      	beq.n	8001826 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01c      	beq.n	80017ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b4:	4b68      	ldr	r3, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80017b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ba:	4a67      	ldr	r2, [pc, #412]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fa96 	bl	8000cf4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017cc:	f7ff fa92 	bl	8000cf4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e21b      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017de:	4b5e      	ldr	r3, [pc, #376]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0ef      	beq.n	80017cc <HAL_RCC_OscConfig+0x3ec>
 80017ec:	e01b      	b.n	8001826 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ee:	4b5a      	ldr	r3, [pc, #360]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80017f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f4:	4a58      	ldr	r2, [pc, #352]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa79 	bl	8000cf4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001806:	f7ff fa75 	bl	8000cf4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e1fe      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001818:	4b4f      	ldr	r3, [pc, #316]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800181a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ef      	bne.n	8001806 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80a6 	beq.w	8001980 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001838:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10d      	bne.n	8001860 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001844:	4b44      	ldr	r3, [pc, #272]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	4a43      	ldr	r2, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	6593      	str	r3, [r2, #88]	; 0x58
 8001850:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185c:	2301      	movs	r3, #1
 800185e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001860:	4b3e      	ldr	r3, [pc, #248]	; (800195c <HAL_RCC_OscConfig+0x57c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d118      	bne.n	800189e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800186c:	4b3b      	ldr	r3, [pc, #236]	; (800195c <HAL_RCC_OscConfig+0x57c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a3a      	ldr	r2, [pc, #232]	; (800195c <HAL_RCC_OscConfig+0x57c>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001876:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001878:	f7ff fa3c 	bl	8000cf4 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001880:	f7ff fa38 	bl	8000cf4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1c1      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001892:	4b32      	ldr	r3, [pc, #200]	; (800195c <HAL_RCC_OscConfig+0x57c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_RCC_OscConfig+0x4d8>
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ac:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b6:	e024      	b.n	8001902 <HAL_RCC_OscConfig+0x522>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d110      	bne.n	80018e2 <HAL_RCC_OscConfig+0x502>
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	4a20      	ldr	r2, [pc, #128]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e0:	e00f      	b.n	8001902 <HAL_RCC_OscConfig+0x522>
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190a:	f7ff f9f3 	bl	8000cf4 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff f9ef 	bl	8000cf4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e176      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x578>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0ed      	beq.n	8001912 <HAL_RCC_OscConfig+0x532>
 8001936:	e01a      	b.n	800196e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff f9dc 	bl	8000cf4 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800193e:	e00f      	b.n	8001960 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff f9d8 	bl	8000cf4 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d906      	bls.n	8001960 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e15f      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001960:	4baa      	ldr	r3, [pc, #680]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1e8      	bne.n	8001940 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001974:	4ba5      	ldr	r3, [pc, #660]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	4aa4      	ldr	r2, [pc, #656]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 800197a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b00      	cmp	r3, #0
 800198a:	d03c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01c      	beq.n	80019ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001994:	4b9d      	ldr	r3, [pc, #628]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800199a:	4a9c      	ldr	r2, [pc, #624]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff f9a6 	bl	8000cf4 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ac:	f7ff f9a2 	bl	8000cf4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e12b      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019be:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 80019c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ef      	beq.n	80019ac <HAL_RCC_OscConfig+0x5cc>
 80019cc:	e01b      	b.n	8001a06 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019ce:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 80019d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d4:	4a8d      	ldr	r2, [pc, #564]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7ff f989 	bl	8000cf4 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e6:	f7ff f985 	bl	8000cf4 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e10e      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f8:	4b84      	ldr	r3, [pc, #528]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 80019fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ef      	bne.n	80019e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8102 	beq.w	8001c14 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	f040 80c5 	bne.w	8001ba4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a1a:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0203 	and.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d12c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d123      	bne.n	8001a88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d11b      	bne.n	8001a88 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d113      	bne.n	8001a88 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d109      	bne.n	8001a88 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d067      	beq.n	8001b58 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d062      	beq.n	8001b54 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0bb      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aa8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aaa:	f7ff f923 	bl	8000cf4 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff f91f 	bl	8000cf4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0a8      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac4:	4b51      	ldr	r3, [pc, #324]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad0:	4b4e      	ldr	r3, [pc, #312]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <HAL_RCC_OscConfig+0x830>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aea:	0212      	lsls	r2, r2, #8
 8001aec:	4311      	orrs	r1, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001af2:	0852      	lsrs	r2, r2, #1
 8001af4:	3a01      	subs	r2, #1
 8001af6:	0552      	lsls	r2, r2, #21
 8001af8:	4311      	orrs	r1, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0652      	lsls	r2, r2, #25
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b0a:	06d2      	lsls	r2, r2, #27
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	493f      	ldr	r1, [pc, #252]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b14:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a3c      	ldr	r2, [pc, #240]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b20:	4b3a      	ldr	r3, [pc, #232]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a39      	ldr	r2, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b2c:	f7ff f8e2 	bl	8000cf4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff f8de 	bl	8000cf4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e067      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b52:	e05f      	b.n	8001c14 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e05e      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d157      	bne.n	8001c14 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b64:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a28      	ldr	r2, [pc, #160]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b70:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b7c:	f7ff f8ba 	bl	8000cf4 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff f8b6 	bl	8000cf4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e03f      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x7a4>
 8001ba2:	e037      	b.n	8001c14 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d02d      	beq.n	8001c06 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001bc8:	f023 0303 	bic.w	r3, r3, #3
 8001bcc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001bd4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bdc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f889 	bl	8000cf4 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7ff f885 	bl	8000cf4 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e00e      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <HAL_RCC_OscConfig+0x82c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x806>
 8001c04:	e006      	b.n	8001c14 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e005      	b.n	8001c16 <HAL_RCC_OscConfig+0x836>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop

08001c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0c8      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c34:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d910      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4961      	ldr	r1, [pc, #388]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0b0      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d04c      	beq.n	8001d0a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c78:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d121      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e09e      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d115      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e092      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e086      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb8:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e07e      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc8:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 0203 	bic.w	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	493f      	ldr	r1, [pc, #252]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cda:	f7ff f80b 	bl	8000cf4 <HAL_GetTick>
 8001cde:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce2:	f7ff f807 	bl	8000cf4 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e066      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 020c 	and.w	r2, r3, #12
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d1eb      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	492c      	ldr	r1, [pc, #176]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d210      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 0207 	bic.w	r2, r3, #7
 8001d3e:	4924      	ldr	r1, [pc, #144]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e036      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4918      	ldr	r1, [pc, #96]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d82:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4910      	ldr	r1, [pc, #64]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d96:	f000 f825 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001d9a:	4601      	mov	r1, r0
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	5cd3      	ldrb	r3, [r2, r3]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	fa21 f303 	lsr.w	r3, r1, r3
 8001db2:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ff4a 	bl	8000c54 <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	080034f8 	.word	0x080034f8
 8001ddc:	20000004 	.word	0x20000004
 8001de0:	20000008 	.word	0x20000008

08001de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d121      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d11e      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e18:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d107      	bne.n	8001e34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e005      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_RCC_GetSysClockFreq+0x108>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10d      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	e004      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d133      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d002      	beq.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d003      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0xaa>
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e8a:	617b      	str	r3, [r7, #20]
      break;
 8001e8c:	e005      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e90:	617b      	str	r3, [r7, #20]
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	617b      	str	r3, [r7, #20]
      break;
 8001e98:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	fb02 f203 	mul.w	r2, r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0e5b      	lsrs	r3, r3, #25
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eda:	69bb      	ldr	r3, [r7, #24]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3724      	adds	r7, #36	; 0x24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08003510 	.word	0x08003510
 8001ef0:	00f42400 	.word	0x00f42400
 8001ef4:	007a1200 	.word	0x007a1200

08001ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f14:	f7ff fff0 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f18:	4601      	mov	r1, r0
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0a1b      	lsrs	r3, r3, #8
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08003508 	.word	0x08003508

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f40:	f7ff ffda 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f44:	4601      	mov	r1, r0
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	0adb      	lsrs	r3, r3, #11
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f52:	5cd3      	ldrb	r3, [r2, r3]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08003508 	.word	0x08003508

08001f68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f80:	f7ff f9ca 	bl	8001318 <HAL_PWREx_GetVoltageRange>
 8001f84:	6178      	str	r0, [r7, #20]
 8001f86:	e014      	b.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fa0:	f7ff f9ba 	bl	8001318 <HAL_PWREx_GetVoltageRange>
 8001fa4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb8:	d10b      	bne.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d919      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2ba0      	cmp	r3, #160	; 0xa0
 8001fc4:	d902      	bls.n	8001fcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e013      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e010      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d902      	bls.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fd8:	2303      	movs	r3, #3
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e00a      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d102      	bne.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e004      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b70      	cmp	r3, #112	; 0x70
 8001fee:	d101      	bne.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	4909      	ldr	r1, [pc, #36]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40022000 	.word	0x40022000

08002028 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002030:	2300      	movs	r3, #0
 8002032:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002034:	2300      	movs	r3, #0
 8002036:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02f      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002048:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800204c:	d005      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800204e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002052:	d015      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002058:	e00f      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a5c      	ldr	r2, [pc, #368]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002066:	e00c      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fa1e 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002078:	e003      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	74fb      	strb	r3, [r7, #19]
      break;
 800207e:	e000      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002082:	7cfb      	ldrb	r3, [r7, #19]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10b      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002088:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	494e      	ldr	r1, [pc, #312]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800209e:	e001      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 809e 	beq.w	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b6:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80020c6:	2300      	movs	r3, #0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00d      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020cc:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	4a3f      	ldr	r2, [pc, #252]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80020d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6593      	str	r3, [r2, #88]	; 0x58
 80020d8:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e4:	2301      	movs	r3, #1
 80020e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e8:	4b3a      	ldr	r3, [pc, #232]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a39      	ldr	r2, [pc, #228]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fdfe 	bl	8000cf4 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020fa:	e009      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fc:	f7fe fdfa 	bl	8000cf4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d902      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	74fb      	strb	r3, [r7, #19]
        break;
 800210e:	e005      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ef      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d15a      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002122:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01e      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	429a      	cmp	r2, r3
 800213c:	d019      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800216a:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d016      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe fdba 	bl	8000cf4 <HAL_GetTick>
 8002180:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002182:	e00b      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7fe fdb6 	bl	8000cf4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d902      	bls.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	74fb      	strb	r3, [r7, #19]
            break;
 800219a:	e006      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ec      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	4904      	ldr	r1, [pc, #16]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021c6:	e009      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
 80021cc:	e006      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021dc:	7c7b      	ldrb	r3, [r7, #17]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4bb2      	ldr	r3, [pc, #712]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4ab1      	ldr	r2, [pc, #708]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fa:	4bac      	ldr	r3, [pc, #688]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f023 0203 	bic.w	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	49a8      	ldr	r1, [pc, #672]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800221c:	4ba3      	ldr	r3, [pc, #652]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 020c 	bic.w	r2, r3, #12
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	49a0      	ldr	r1, [pc, #640]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800223e:	4b9b      	ldr	r3, [pc, #620]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002244:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	4997      	ldr	r1, [pc, #604]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002260:	4b92      	ldr	r3, [pc, #584]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	498f      	ldr	r1, [pc, #572]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002282:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002290:	4986      	ldr	r1, [pc, #536]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022a4:	4b81      	ldr	r3, [pc, #516]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	497e      	ldr	r1, [pc, #504]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022c6:	4b79      	ldr	r3, [pc, #484]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4975      	ldr	r1, [pc, #468]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022e8:	4b70      	ldr	r3, [pc, #448]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f6:	496d      	ldr	r1, [pc, #436]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800230a:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002318:	4964      	ldr	r1, [pc, #400]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d028      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x356>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800232c:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	495c      	ldr	r1, [pc, #368]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800234a:	d106      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x332>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234c:	4b57      	ldr	r3, [pc, #348]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a56      	ldr	r2, [pc, #344]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002356:	60d3      	str	r3, [r2, #12]
 8002358:	e011      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x356>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002362:	d10c      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x356>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	2101      	movs	r1, #1
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f8a0 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8002370:	4603      	mov	r3, r0
 8002372:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          /* set overall return value */
          status = ret;
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d028      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	4944      	ldr	r1, [pc, #272]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a8:	d106      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x390>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023aa:	4b40      	ldr	r3, [pc, #256]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4a3f      	ldr	r2, [pc, #252]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80023b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b4:	60d3      	str	r3, [r2, #12]
 80023b6:	e011      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2101      	movs	r1, #1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f871 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d028      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023e8:	4b30      	ldr	r3, [pc, #192]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	492d      	ldr	r1, [pc, #180]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002406:	d106      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002408:	4b28      	ldr	r3, [pc, #160]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800240e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002412:	60d3      	str	r3, [r2, #12]
 8002414:	e011      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x412>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800241e:	d10c      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3304      	adds	r3, #4
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f842 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x412>
      {
        /* set overall return value */
        status = ret;
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01c      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	4915      	ldr	r1, [pc, #84]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002464:	d10c      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	2102      	movs	r1, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f81f 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002476:	7cfb      	ldrb	r3, [r7, #19]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x458>
      {
        /* set overall return value */
        status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x484>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000

080024b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024be:	4b73      	ldr	r3, [pc, #460]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d018      	beq.n	80024fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ca:	4b70      	ldr	r3, [pc, #448]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0203 	and.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10d      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
       ||
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024e2:	4b6a      	ldr	r3, [pc, #424]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
       ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d044      	beq.n	8002580 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e041      	b.n	8002580 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d00c      	beq.n	800251e <RCCEx_PLLSAI1_Config+0x6e>
 8002504:	2b03      	cmp	r3, #3
 8002506:	d013      	beq.n	8002530 <RCCEx_PLLSAI1_Config+0x80>
 8002508:	2b01      	cmp	r3, #1
 800250a:	d120      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800250c:	4b5f      	ldr	r3, [pc, #380]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11d      	bne.n	8002554 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800251c:	e01a      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800251e:	4b5b      	ldr	r3, [pc, #364]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d116      	bne.n	8002558 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252e:	e013      	b.n	8002558 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002530:	4b56      	ldr	r3, [pc, #344]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800254c:	e006      	b.n	800255c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
      break;
 8002552:	e004      	b.n	800255e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002554:	bf00      	nop
 8002556:	e002      	b.n	800255e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002558:	bf00      	nop
 800255a:	e000      	b.n	800255e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800255c:	bf00      	nop
    }

    if(status == HAL_OK)
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002564:	4b49      	ldr	r3, [pc, #292]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	3b01      	subs	r3, #1
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	430b      	orrs	r3, r1
 800257a:	4944      	ldr	r1, [pc, #272]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d17c      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002586:	4b41      	ldr	r3, [pc, #260]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 800258c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002592:	f7fe fbaf 	bl	8000cf4 <HAL_GetTick>
 8002596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002598:	e009      	b.n	80025ae <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259a:	f7fe fbab 	bl	8000cf4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d902      	bls.n	80025ae <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	73fb      	strb	r3, [r7, #15]
        break;
 80025ac:	e005      	b.n	80025ba <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ae:	4b37      	ldr	r3, [pc, #220]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ef      	bne.n	800259a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d15f      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d110      	bne.n	80025e8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6892      	ldr	r2, [r2, #8]
 80025d6:	0211      	lsls	r1, r2, #8
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68d2      	ldr	r2, [r2, #12]
 80025dc:	06d2      	lsls	r2, r2, #27
 80025de:	430a      	orrs	r2, r1
 80025e0:	492a      	ldr	r1, [pc, #168]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	610b      	str	r3, [r1, #16]
 80025e6:	e027      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d112      	bne.n	8002614 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ee:	4b27      	ldr	r3, [pc, #156]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6892      	ldr	r2, [r2, #8]
 80025fe:	0211      	lsls	r1, r2, #8
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6912      	ldr	r2, [r2, #16]
 8002604:	0852      	lsrs	r2, r2, #1
 8002606:	3a01      	subs	r2, #1
 8002608:	0552      	lsls	r2, r2, #21
 800260a:	430a      	orrs	r2, r1
 800260c:	491f      	ldr	r1, [pc, #124]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	610b      	str	r3, [r1, #16]
 8002612:	e011      	b.n	8002638 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800261c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6892      	ldr	r2, [r2, #8]
 8002624:	0211      	lsls	r1, r2, #8
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6952      	ldr	r2, [r2, #20]
 800262a:	0852      	lsrs	r2, r2, #1
 800262c:	3a01      	subs	r2, #1
 800262e:	0652      	lsls	r2, r2, #25
 8002630:	430a      	orrs	r2, r1
 8002632:	4916      	ldr	r1, [pc, #88]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002638:	4b14      	ldr	r3, [pc, #80]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a13      	ldr	r2, [pc, #76]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 800263e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002642:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7fe fb56 	bl	8000cf4 <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800264a:	e009      	b.n	8002660 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800264c:	f7fe fb52 	bl	8000cf4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d902      	bls.n	8002660 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	73fb      	strb	r3, [r7, #15]
          break;
 800265e:	e005      	b.n	800266c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002672:	4b06      	ldr	r3, [pc, #24]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <RCCEx_PLLSAI1_Config+0x1dc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e040      	b.n	8002724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe f964 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	; 0x24
 80026bc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fae8 	bl	8002ca4 <UART_SetConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e022      	b.n	8002724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fd12 	bl	8003110 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fd99 	bl	8003254 <UART_CheckIdleState>
 8002722:	4603      	mov	r3, r0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	2b20      	cmp	r3, #32
 8002742:	f040 8081 	bne.w	8002848 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_UART_Transmit+0x26>
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e079      	b.n	800284a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_UART_Transmit+0x38>
 8002760:	2302      	movs	r3, #2
 8002762:	e072      	b.n	800284a <HAL_UART_Transmit+0x11e>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2221      	movs	r2, #33	; 0x21
 8002776:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002778:	f7fe fabc 	bl	8000cf4 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	88fa      	ldrh	r2, [r7, #6]
 800278a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002796:	d108      	bne.n	80027aa <HAL_UART_Transmit+0x7e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d104      	bne.n	80027aa <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	e003      	b.n	80027b2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80027ba:	e02d      	b.n	8002818 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2200      	movs	r2, #0
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 fd89 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e039      	b.n	800284a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	881a      	ldrh	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e8:	b292      	uxth	r2, r2
 80027ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	3302      	adds	r3, #2
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	e008      	b.n	8002806 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	b292      	uxth	r2, r2
 80027fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	3301      	adds	r3, #1
 8002804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1cb      	bne.n	80027bc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2200      	movs	r2, #0
 800282c:	2140      	movs	r1, #64	; 0x40
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fd55 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e005      	b.n	800284a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	e000      	b.n	800284a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002848:	2302      	movs	r3, #2
  }
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b08a      	sub	sp, #40	; 0x28
 8002856:	af02      	add	r7, sp, #8
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002866:	2b20      	cmp	r3, #32
 8002868:	f040 80bb 	bne.w	80029e2 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Receive+0x26>
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0b3      	b.n	80029e4 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_UART_Receive+0x38>
 8002886:	2302      	movs	r3, #2
 8002888:	e0ac      	b.n	80029e4 <HAL_UART_Receive+0x192>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2222      	movs	r2, #34	; 0x22
 800289c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800289e:	f7fe fa29 	bl	8000cf4 <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	88fa      	ldrh	r2, [r7, #6]
 80028a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028bc:	d10e      	bne.n	80028dc <HAL_UART_Receive+0x8a>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_UART_Receive+0x80>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80028cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028d0:	e02d      	b.n	800292e <HAL_UART_Receive+0xdc>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	22ff      	movs	r2, #255	; 0xff
 80028d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028da:	e028      	b.n	800292e <HAL_UART_Receive+0xdc>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10d      	bne.n	8002900 <HAL_UART_Receive+0xae>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d104      	bne.n	80028f6 <HAL_UART_Receive+0xa4>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	22ff      	movs	r2, #255	; 0xff
 80028f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028f4:	e01b      	b.n	800292e <HAL_UART_Receive+0xdc>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	227f      	movs	r2, #127	; 0x7f
 80028fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028fe:	e016      	b.n	800292e <HAL_UART_Receive+0xdc>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002908:	d10d      	bne.n	8002926 <HAL_UART_Receive+0xd4>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d104      	bne.n	800291c <HAL_UART_Receive+0xca>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	227f      	movs	r2, #127	; 0x7f
 8002916:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800291a:	e008      	b.n	800292e <HAL_UART_Receive+0xdc>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	223f      	movs	r2, #63	; 0x3f
 8002920:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002924:	e003      	b.n	800292e <HAL_UART_Receive+0xdc>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002934:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	d108      	bne.n	8002952 <HAL_UART_Receive+0x100>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	61bb      	str	r3, [r7, #24]
 8002950:	e003      	b.n	800295a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002962:	e033      	b.n	80029cc <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2200      	movs	r2, #0
 800296c:	2120      	movs	r1, #32
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fcb5 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e032      	b.n	80029e4 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10c      	bne.n	800299e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800298a:	b29a      	uxth	r2, r3
 800298c:	8a7b      	ldrh	r3, [r7, #18]
 800298e:	4013      	ands	r3, r2
 8002990:	b29a      	uxth	r2, r3
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3302      	adds	r3, #2
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	e00d      	b.n	80029ba <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	8a7b      	ldrh	r3, [r7, #18]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4013      	ands	r3, r2
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1c5      	bne.n	8002964 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d113      	bne.n	8002a44 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00e      	beq.n	8002a44 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8114 	beq.w	8002c62 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
      }
      return;
 8002a42:	e10e      	b.n	8002c62 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80d6 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4b86      	ldr	r3, [pc, #536]	; (8002c74 <HAL_UART_IRQHandler+0x288>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80cb 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <HAL_UART_IRQHandler+0x9e>
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00e      	beq.n	8002ab2 <HAL_UART_IRQHandler+0xc6>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00e      	beq.n	8002ada <HAL_UART_IRQHandler+0xee>
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d009      	beq.n	8002ada <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2204      	movs	r2, #4
 8002acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad2:	f043 0202 	orr.w	r2, r3, #2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d104      	bne.n	8002af8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2208      	movs	r2, #8
 8002afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b04:	f043 0208 	orr.w	r2, r3, #8
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00f      	beq.n	8002b36 <HAL_UART_IRQHandler+0x14a>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 8093 	beq.w	8002c66 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b68:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d004      	beq.n	8002b82 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d031      	beq.n	8002be6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 fc26 	bl	80033d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d123      	bne.n	8002bde <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d013      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb2:	4a31      	ldr	r2, [pc, #196]	; (8002c78 <HAL_UART_IRQHandler+0x28c>)
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f9d9 	bl	8000f72 <HAL_DMA_Abort_IT>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	e00e      	b.n	8002bf4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f85a 	bl	8002c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	e00a      	b.n	8002bf4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f856 	bl	8002c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	e006      	b.n	8002bf4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f852 	bl	8002c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002bf2:	e038      	b.n	8002c66 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf4:	bf00      	nop
    return;
 8002bf6:	e036      	b.n	8002c66 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <HAL_UART_IRQHandler+0x232>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fc2b 	bl	8003472 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c1c:	e026      	b.n	8002c6c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00d      	beq.n	8002c44 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d017      	beq.n	8002c6a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
    }
    return;
 8002c42:	e012      	b.n	8002c6a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <HAL_UART_IRQHandler+0x280>
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 fbf1 	bl	8003440 <UART_EndTransmit_IT>
    return;
 8002c5e:	bf00      	nop
 8002c60:	e004      	b.n	8002c6c <HAL_UART_IRQHandler+0x280>
      return;
 8002c62:	bf00      	nop
 8002c64:	e002      	b.n	8002c6c <HAL_UART_IRQHandler+0x280>
    return;
 8002c66:	bf00      	nop
 8002c68:	e000      	b.n	8002c6c <HAL_UART_IRQHandler+0x280>
    return;
 8002c6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	04000120 	.word	0x04000120
 8002c78:	08003415 	.word	0x08003415

08002c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ca8:	b088      	sub	sp, #32
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4baa      	ldr	r3, [pc, #680]	; (8002f7c <UART_SetConfig+0x2d8>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	69f9      	ldr	r1, [r7, #28]
 8002cda:	430b      	orrs	r3, r1
 8002cdc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4aa0      	ldr	r2, [pc, #640]	; (8002f80 <UART_SetConfig+0x2dc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a97      	ldr	r2, [pc, #604]	; (8002f84 <UART_SetConfig+0x2e0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d121      	bne.n	8002d70 <UART_SetConfig+0xcc>
 8002d2c:	4b96      	ldr	r3, [pc, #600]	; (8002f88 <UART_SetConfig+0x2e4>)
 8002d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d816      	bhi.n	8002d68 <UART_SetConfig+0xc4>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <UART_SetConfig+0x9c>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d5d 	.word	0x08002d5d
 8002d48:	08002d57 	.word	0x08002d57
 8002d4c:	08002d63 	.word	0x08002d63
 8002d50:	2301      	movs	r3, #1
 8002d52:	76fb      	strb	r3, [r7, #27]
 8002d54:	e098      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002d56:	2302      	movs	r3, #2
 8002d58:	76fb      	strb	r3, [r7, #27]
 8002d5a:	e095      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	76fb      	strb	r3, [r7, #27]
 8002d60:	e092      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002d62:	2308      	movs	r3, #8
 8002d64:	76fb      	strb	r3, [r7, #27]
 8002d66:	e08f      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002d68:	2310      	movs	r3, #16
 8002d6a:	76fb      	strb	r3, [r7, #27]
 8002d6c:	bf00      	nop
 8002d6e:	e08b      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a85      	ldr	r2, [pc, #532]	; (8002f8c <UART_SetConfig+0x2e8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d134      	bne.n	8002de4 <UART_SetConfig+0x140>
 8002d7a:	4b83      	ldr	r3, [pc, #524]	; (8002f88 <UART_SetConfig+0x2e4>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b0c      	cmp	r3, #12
 8002d86:	d829      	bhi.n	8002ddc <UART_SetConfig+0x138>
 8002d88:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <UART_SetConfig+0xec>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002dc5 	.word	0x08002dc5
 8002d94:	08002ddd 	.word	0x08002ddd
 8002d98:	08002ddd 	.word	0x08002ddd
 8002d9c:	08002ddd 	.word	0x08002ddd
 8002da0:	08002dd1 	.word	0x08002dd1
 8002da4:	08002ddd 	.word	0x08002ddd
 8002da8:	08002ddd 	.word	0x08002ddd
 8002dac:	08002ddd 	.word	0x08002ddd
 8002db0:	08002dcb 	.word	0x08002dcb
 8002db4:	08002ddd 	.word	0x08002ddd
 8002db8:	08002ddd 	.word	0x08002ddd
 8002dbc:	08002ddd 	.word	0x08002ddd
 8002dc0:	08002dd7 	.word	0x08002dd7
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	76fb      	strb	r3, [r7, #27]
 8002dc8:	e05e      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	76fb      	strb	r3, [r7, #27]
 8002dce:	e05b      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	76fb      	strb	r3, [r7, #27]
 8002dd4:	e058      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	76fb      	strb	r3, [r7, #27]
 8002dda:	e055      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002ddc:	2310      	movs	r3, #16
 8002dde:	76fb      	strb	r3, [r7, #27]
 8002de0:	bf00      	nop
 8002de2:	e051      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a69      	ldr	r2, [pc, #420]	; (8002f90 <UART_SetConfig+0x2ec>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d120      	bne.n	8002e30 <UART_SetConfig+0x18c>
 8002dee:	4b66      	ldr	r3, [pc, #408]	; (8002f88 <UART_SetConfig+0x2e4>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d00f      	beq.n	8002e1c <UART_SetConfig+0x178>
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d802      	bhi.n	8002e06 <UART_SetConfig+0x162>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <UART_SetConfig+0x16c>
 8002e04:	e010      	b.n	8002e28 <UART_SetConfig+0x184>
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d005      	beq.n	8002e16 <UART_SetConfig+0x172>
 8002e0a:	2b30      	cmp	r3, #48	; 0x30
 8002e0c:	d009      	beq.n	8002e22 <UART_SetConfig+0x17e>
 8002e0e:	e00b      	b.n	8002e28 <UART_SetConfig+0x184>
 8002e10:	2300      	movs	r3, #0
 8002e12:	76fb      	strb	r3, [r7, #27]
 8002e14:	e038      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e16:	2302      	movs	r3, #2
 8002e18:	76fb      	strb	r3, [r7, #27]
 8002e1a:	e035      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	76fb      	strb	r3, [r7, #27]
 8002e20:	e032      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e22:	2308      	movs	r3, #8
 8002e24:	76fb      	strb	r3, [r7, #27]
 8002e26:	e02f      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	76fb      	strb	r3, [r7, #27]
 8002e2c:	bf00      	nop
 8002e2e:	e02b      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <UART_SetConfig+0x2dc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d124      	bne.n	8002e84 <UART_SetConfig+0x1e0>
 8002e3a:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <UART_SetConfig+0x2e4>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e48:	d012      	beq.n	8002e70 <UART_SetConfig+0x1cc>
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4e:	d802      	bhi.n	8002e56 <UART_SetConfig+0x1b2>
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <UART_SetConfig+0x1c0>
 8002e54:	e012      	b.n	8002e7c <UART_SetConfig+0x1d8>
 8002e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5a:	d006      	beq.n	8002e6a <UART_SetConfig+0x1c6>
 8002e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e60:	d009      	beq.n	8002e76 <UART_SetConfig+0x1d2>
 8002e62:	e00b      	b.n	8002e7c <UART_SetConfig+0x1d8>
 8002e64:	2300      	movs	r3, #0
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e00e      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e00b      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e70:	2304      	movs	r3, #4
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e008      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e76:	2308      	movs	r3, #8
 8002e78:	76fb      	strb	r3, [r7, #27]
 8002e7a:	e005      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	76fb      	strb	r3, [r7, #27]
 8002e80:	bf00      	nop
 8002e82:	e001      	b.n	8002e88 <UART_SetConfig+0x1e4>
 8002e84:	2310      	movs	r3, #16
 8002e86:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3c      	ldr	r2, [pc, #240]	; (8002f80 <UART_SetConfig+0x2dc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	f040 8082 	bne.w	8002f98 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e94:	7efb      	ldrb	r3, [r7, #27]
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d823      	bhi.n	8002ee2 <UART_SetConfig+0x23e>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <UART_SetConfig+0x1fc>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08002ee3 	.word	0x08002ee3
 8002ea8:	08002ecd 	.word	0x08002ecd
 8002eac:	08002ee3 	.word	0x08002ee3
 8002eb0:	08002ed3 	.word	0x08002ed3
 8002eb4:	08002ee3 	.word	0x08002ee3
 8002eb8:	08002ee3 	.word	0x08002ee3
 8002ebc:	08002ee3 	.word	0x08002ee3
 8002ec0:	08002edb 	.word	0x08002edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f7ff f824 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8002ec8:	6178      	str	r0, [r7, #20]
        break;
 8002eca:	e00f      	b.n	8002eec <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ecc:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <UART_SetConfig+0x2f0>)
 8002ece:	617b      	str	r3, [r7, #20]
        break;
 8002ed0:	e00c      	b.n	8002eec <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed2:	f7fe ff87 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8002ed6:	6178      	str	r0, [r7, #20]
        break;
 8002ed8:	e008      	b.n	8002eec <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	617b      	str	r3, [r7, #20]
        break;
 8002ee0:	e004      	b.n	8002eec <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	76bb      	strb	r3, [r7, #26]
        break;
 8002eea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8100 	beq.w	80030f4 <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d305      	bcc.n	8002f10 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d902      	bls.n	8002f16 <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	76bb      	strb	r3, [r7, #26]
 8002f14:	e0ee      	b.n	80030f4 <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	0214      	lsls	r4, r2, #8
 8002f28:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f2c:	020b      	lsls	r3, r1, #8
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6852      	ldr	r2, [r2, #4]
 8002f32:	0852      	lsrs	r2, r2, #1
 8002f34:	4611      	mov	r1, r2
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	eb13 0b01 	adds.w	fp, r3, r1
 8002f3e:	eb44 0c02 	adc.w	ip, r4, r2
 8002f42:	4658      	mov	r0, fp
 8002f44:	4661      	mov	r1, ip
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f04f 0400 	mov.w	r4, #0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4623      	mov	r3, r4
 8002f52:	f7fd f93b 	bl	80001cc <__aeabi_uldivmod>
 8002f56:	4603      	mov	r3, r0
 8002f58:	460c      	mov	r4, r1
 8002f5a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f62:	d308      	bcc.n	8002f76 <UART_SetConfig+0x2d2>
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f6a:	d204      	bcs.n	8002f76 <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	e0be      	b.n	80030f4 <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	76bb      	strb	r3, [r7, #26]
 8002f7a:	e0bb      	b.n	80030f4 <UART_SetConfig+0x450>
 8002f7c:	efff69f3 	.word	0xefff69f3
 8002f80:	40008000 	.word	0x40008000
 8002f84:	40013800 	.word	0x40013800
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	40004800 	.word	0x40004800
 8002f94:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa0:	d15c      	bne.n	800305c <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8002fa2:	7efb      	ldrb	r3, [r7, #27]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d828      	bhi.n	8002ffa <UART_SetConfig+0x356>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x30c>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002fdd 	.word	0x08002fdd
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	08002ffb 	.word	0x08002ffb
 8002fc0:	08002feb 	.word	0x08002feb
 8002fc4:	08002ffb 	.word	0x08002ffb
 8002fc8:	08002ffb 	.word	0x08002ffb
 8002fcc:	08002ffb 	.word	0x08002ffb
 8002fd0:	08002ff3 	.word	0x08002ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7fe ff9c 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8002fd8:	6178      	str	r0, [r7, #20]
        break;
 8002fda:	e013      	b.n	8003004 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fdc:	f7fe ffae 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8002fe0:	6178      	str	r0, [r7, #20]
        break;
 8002fe2:	e00f      	b.n	8003004 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe4:	4b49      	ldr	r3, [pc, #292]	; (800310c <UART_SetConfig+0x468>)
 8002fe6:	617b      	str	r3, [r7, #20]
        break;
 8002fe8:	e00c      	b.n	8003004 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fea:	f7fe fefb 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8002fee:	6178      	str	r0, [r7, #20]
        break;
 8002ff0:	e008      	b.n	8003004 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff6:	617b      	str	r3, [r7, #20]
        break;
 8002ff8:	e004      	b.n	8003004 <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	76bb      	strb	r3, [r7, #26]
        break;
 8003002:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d074      	beq.n	80030f4 <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	005a      	lsls	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	b29b      	uxth	r3, r3
 8003020:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	d916      	bls.n	8003056 <UART_SetConfig+0x3b2>
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302e:	d212      	bcs.n	8003056 <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f023 030f 	bic.w	r3, r3, #15
 8003038:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	b29a      	uxth	r2, r3
 8003046:	89fb      	ldrh	r3, [r7, #14]
 8003048:	4313      	orrs	r3, r2
 800304a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	89fa      	ldrh	r2, [r7, #14]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	e04e      	b.n	80030f4 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	76bb      	strb	r3, [r7, #26]
 800305a:	e04b      	b.n	80030f4 <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 800305c:	7efb      	ldrb	r3, [r7, #27]
 800305e:	2b08      	cmp	r3, #8
 8003060:	d827      	bhi.n	80030b2 <UART_SetConfig+0x40e>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <UART_SetConfig+0x3c4>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	0800308d 	.word	0x0800308d
 800306c:	08003095 	.word	0x08003095
 8003070:	0800309d 	.word	0x0800309d
 8003074:	080030b3 	.word	0x080030b3
 8003078:	080030a3 	.word	0x080030a3
 800307c:	080030b3 	.word	0x080030b3
 8003080:	080030b3 	.word	0x080030b3
 8003084:	080030b3 	.word	0x080030b3
 8003088:	080030ab 	.word	0x080030ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7fe ff40 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8003090:	6178      	str	r0, [r7, #20]
        break;
 8003092:	e013      	b.n	80030bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7fe ff52 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8003098:	6178      	str	r0, [r7, #20]
        break;
 800309a:	e00f      	b.n	80030bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <UART_SetConfig+0x468>)
 800309e:	617b      	str	r3, [r7, #20]
        break;
 80030a0:	e00c      	b.n	80030bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a2:	f7fe fe9f 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 80030a6:	6178      	str	r0, [r7, #20]
        break;
 80030a8:	e008      	b.n	80030bc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ae:	617b      	str	r3, [r7, #20]
        break;
 80030b0:	e004      	b.n	80030bc <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	76bb      	strb	r3, [r7, #26]
        break;
 80030ba:	bf00      	nop
    }

    if (pclk != 0U)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d018      	beq.n	80030f4 <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	085a      	lsrs	r2, r3, #1
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	441a      	add	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	d908      	bls.n	80030f0 <UART_SetConfig+0x44c>
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e4:	d204      	bcs.n	80030f0 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e001      	b.n	80030f4 <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003100:	7ebb      	ldrb	r3, [r7, #26]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800310c:	00f42400 	.word	0x00f42400

08003110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01a      	beq.n	8003226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320e:	d10a      	bne.n	8003226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af02      	add	r7, sp, #8
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003262:	f7fd fd47 	bl	8000cf4 <HAL_GetTick>
 8003266:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b08      	cmp	r3, #8
 8003274:	d10e      	bne.n	8003294 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003276:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f82a 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e020      	b.n	80032d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d10e      	bne.n	80032c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f814 	bl	80032de <UART_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e00a      	b.n	80032d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ee:	e05d      	b.n	80033ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d059      	beq.n	80033ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f8:	f7fd fcfc 	bl	8000cf4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d302      	bcc.n	800330e <UART_WaitOnFlagUntilTimeout+0x30>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11b      	bne.n	8003346 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800331c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e042      	b.n	80033cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02b      	beq.n	80033ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003362:	d123      	bne.n	80033ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800337c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e00f      	b.n	80033cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	4013      	ands	r3, r2
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	461a      	mov	r2, r3
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d092      	beq.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff fc2c 	bl	8002c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003438:	bf00      	nop
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003456:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fc09 	bl	8002c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	4e0d      	ldr	r6, [pc, #52]	; (80034c0 <__libc_init_array+0x38>)
 800348c:	4c0d      	ldr	r4, [pc, #52]	; (80034c4 <__libc_init_array+0x3c>)
 800348e:	1ba4      	subs	r4, r4, r6
 8003490:	10a4      	asrs	r4, r4, #2
 8003492:	2500      	movs	r5, #0
 8003494:	42a5      	cmp	r5, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	4e0b      	ldr	r6, [pc, #44]	; (80034c8 <__libc_init_array+0x40>)
 800349a:	4c0c      	ldr	r4, [pc, #48]	; (80034cc <__libc_init_array+0x44>)
 800349c:	f000 f820 	bl	80034e0 <_init>
 80034a0:	1ba4      	subs	r4, r4, r6
 80034a2:	10a4      	asrs	r4, r4, #2
 80034a4:	2500      	movs	r5, #0
 80034a6:	42a5      	cmp	r5, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034b0:	4798      	blx	r3
 80034b2:	3501      	adds	r5, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ba:	4798      	blx	r3
 80034bc:	3501      	adds	r5, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	08003548 	.word	0x08003548
 80034c4:	08003548 	.word	0x08003548
 80034c8:	08003548 	.word	0x08003548
 80034cc:	0800354c 	.word	0x0800354c

080034d0 <memset>:
 80034d0:	4402      	add	r2, r0
 80034d2:	4603      	mov	r3, r0
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d100      	bne.n	80034da <memset+0xa>
 80034d8:	4770      	bx	lr
 80034da:	f803 1b01 	strb.w	r1, [r3], #1
 80034de:	e7f9      	b.n	80034d4 <memset+0x4>

080034e0 <_init>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	bf00      	nop
 80034e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e6:	bc08      	pop	{r3}
 80034e8:	469e      	mov	lr, r3
 80034ea:	4770      	bx	lr

080034ec <_fini>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr
